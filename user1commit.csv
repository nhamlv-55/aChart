created_datetime,modified_datetime,id,user_id,material_exercise_id,content,filename,hashed_filename
1439979001315,NULL,138551,1,1,"import time

for i in range(100):
    print(i)",welcome.py,...
1439979010169,NULL,138552,1,1,"import time

for i in range(200):
    print(i)",welcome.py,...
1441728885963,NULL,205907,1,1,"import time

for i in range(200):
    print(i)",welcome.py,...
1441728996896,NULL,205908,1,1,"import time

for i in range(200):
    print(i)",welcome.py,...
1438606198521,NULL,784,1,2,"def capitalize_animals(animals):
    new_animals = []

    for animal in Animals:
        new_animals.append(animal[0].upper() + animal[1:])

    return new_animals

if __name__ == ""__main__"":
    print(capitalize_animals(['cheetah', 'hare', 'reindeer', 'calf']))",animals.py,...
1438606368249,NULL,801,1,2,"def capitalize_animals(animals):
    new_animals = []

    for animal in anumals:
        new_animals.append(animal[0].upper() + animal[1:])

    return new_animals

if __name__ == ""__main__"":
    print(capitalize_animals(['cheetah', 'hare', 'reindeer', 'calf']))",animals.py,...
1438606378494,NULL,804,1,2,"def capitalize_animals(animals):
    new_animals = []

    for animal in animals:
        new_animals.append(animal[0].upper() + animal[1:])

    return new_animals

if __name__ == ""__main__"":
    print(capitalize_animals(['cheetah', 'hare', 'reindeer', 'calf']))",animals.py,...
1438654507954,NULL,3723,1,2,"def capitalize_animals(animals):
    new_animals = []

    for animal in animals:
        new_animals.append(animal[0].upper() + animal[1:])

    return new_animals

if __name__ == ""__main__"":
    print(capitalize_animals(['cheetah', 'hare', 'reindeer', 'calf']))",animals.py,...
1441040932456,NULL,192075,1,2,"def capitalize_animals(animals):
    new_animals = []

    for animal in animals:
        new_animals.append(animal[0].upper() + animal[1:])

    return new_animals

if __name__ == ""__main__"":
    print(capitalize_animals(['cheetah', 'hare', 'reindeer', 'calf']))",animals.py,...
1438613877566,NULL,2035,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = """"

    return hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1438613902393,NULL,2046,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = """"

    return hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1438614183863,NULL,2091,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = """"

    return hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1438614359680,NULL,2109,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]",rgb2hex.py,...
1438614367881,NULL,2110,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output)",rgb2hex.py,...
1438614404425,NULL,2114,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1438614580932,NULL,2142,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(oepn('input_data', 'r').read())",rgb2hex.py,...
1438614589819,NULL,2146,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438614604087,NULL,2150,1,3,"bashCommand = ""ls -al /mnt/elice/input_data""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438614614596,NULL,2152,1,3,"bashCommand = ""ls -al /mnt/elice""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438614737235,NULL,2169,1,3,"bashCommand = ""ls -al /mnt/elice""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438614743716,NULL,2170,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438615051800,NULL,2213,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438615058187,NULL,2215,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438615550301,NULL,2326,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438615583851,NULL,2336,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438615591090,NULL,2339,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438615723812,NULL,2365,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438615729017,NULL,2366,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438615765212,NULL,2371,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438615770916,NULL,2372,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438659028839,NULL,4013,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438671516534,NULL,5695,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438671717032,NULL,5712,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438841331157,NULL,27721,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438842526199,NULL,27763,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438895615170,NULL,34974,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438895620948,NULL,34975,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438895623037,NULL,34976,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438919350020,NULL,35945,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438919360205,NULL,35946,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


print(open('input_data', 'r').read())",rgb2hex.py,...
1438919381850,NULL,35948,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


a = 'hi'

for i in range(20):
    print(a)
    a = a + a",rgb2hex.py,...
1439182221601,NULL,69843,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))


a = 'hi'

for i in range(20):
    print(a)
    a = a + a",rgb2hex.py,...
1439182241884,NULL,69847,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439182264785,NULL,69854,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))

import time

for i in range(5):
    print(i)
    time.sleep(2)",rgb2hex.py,...
1439219135895,NULL,79100,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439246044015,NULL,80063,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439255491735,NULL,80507,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439325873056,NULL,90289,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439325877375,NULL,90290,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439325882732,NULL,90291,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439325900865,NULL,90292,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439325905105,NULL,90293,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439325909070,NULL,90294,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439325907476,NULL,90295,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439326166987,NULL,90304,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439327622671,NULL,90339,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1439327626462,NULL,90340,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440577509415,NULL,173057,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440577756581,NULL,173079,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440577759898,NULL,173080,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440577765443,NULL,173081,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440577771019,NULL,173083,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440577760561,NULL,173085,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440577804501,NULL,173093,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440578024238,NULL,173112,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440578431976,NULL,173158,1,3,"bashCommand = ""ls -al""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1440580945619,NULL,173345,1,3,"while True:
    a = 10",rgb2hex.py,...
1440580973224,NULL,173347,1,3,"a = 'a'
while True:
    a = a + a",rgb2hex.py,...
1440599326564,NULL,175553,1,3,"a = 'a'
while True:
    a = a + a",rgb2hex.py,...
1440599343949,NULL,175554,1,3,"a = 'a'
while True:
    a = a + a",rgb2hex.py,...
1440599348234,NULL,175555,1,3,"a = 'a'
while True:
    a = a + a",rgb2hex.py,...
1441090782956,NULL,192920,1,3,"a = input()
print(a)",rgb2hex.py,...
1441090790980,NULL,192923,1,3,"a = input()
print(a)",rgb2hex.py,...
1441163700211,NULL,194710,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = ('%02X'*3) % (r, g, b)

    return hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1441163708808,NULL,194711,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = (r'%02X'*3) % (r, g, b)

    return hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1441163723177,NULL,194712,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = '%02X%02X%02X' % (r, g, b)

    return hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1441163750568,NULL,194713,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = '(%02X'*3) % map(int, [r, g, b])

    return hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1441163761603,NULL,194715,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = ('%02X' * 3) % map(int, [r, g, b])

    return hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1441163776628,NULL,194716,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = ('%02X' * 3) % tuple(map(int, [r, g, b]))

    return hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1441163822206,NULL,194719,1,3,"def main():
    r = input() # First line
    g = input() # Second line
    b = input() # Third line

    # change r, g, b into integer...

    print(rgb2hex(r, g, b))


def rgb2hex(r, g, b):
    hex_color = ('%02X' * 3) % tuple(map(int, [r, g, b]))

    return '#' + hex_color

if __name__ == ""__main__"":
    main()",rgb2hex.py,...
1441690490545,NULL,205807,1,3,"bashCommand = ""cat /proc/self/cgroup""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output)",rgb2hex.py,...
1441690498283,NULL,205808,1,3,"bashCommand = ""cat /proc/self/cgroup""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1441717680412,NULL,205891,1,3,"bashCommand = ""cat /proc/self/cgroup""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))asd",rgb2hex.py,...
1441717684680,NULL,205892,1,3,"bashCommand = ""cat /proc/self/cgroup""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))",rgb2hex.py,...
1441855285204,NULL,206215,1,3,"bashCommand = ""cat /proc/self/cgroup""
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
output = process.communicate()[0]
print(output.decode('utf-8'))

def sprint(msg):
    print('<grader asdfasdfasdfasdf>' + msg + '</asdfasdfasdfasdf>')
    
sprint('test')
sprint('''
asdf1
asdf2
asdf3''')

print('ha')",rgb2hex.py,...
1439330253092,NULL,90435,1,8,"import numpy

def main():
    (N, X, Y) = read_data()
    print(N)
    print(X)
    print(Y)

def read_data():
    # 1


    # 2

    return (N, X, Y)

if __name__ == ""__main__"":
    main()",exercise.py,...
1439330256979,NULL,90436,1,8,"import numpy

def main():
    (N, X, Y) = read_data()
    print(N)
    print(X)
    print(Y)

def read_data():
    # 1


    # 2

    return (N, X, Y)

if __name__ == ""__main__"":
    main()",exercise.py,...
1439330260877,NULL,90437,1,8,"import numpy

def main():
    (N, X, Y) = read_data()
    print(N)
    print(X)
    print(Y)

def read_data():
    # 1


    # 2

    return (N, X, Y)

if __name__ == ""__main__"":
    main()",exercise.py,...
1439330264914,NULL,90438,1,8,"import numpy

def main():
    (N, X, Y) = read_data()
    print(N)
    print(X)
    print(Y)

def read_data():
    # 1


    # 2

    return (N, X, Y)

if __name__ == ""__main__"":
    main()",exercise.py,...
1438654618594,NULL,3729,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    # 2

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1438654708866,NULL,3740,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    model = statsmpdels.api.OLS(Y, X)
    results = model.fit()

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1438654727508,NULL,3741,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    model = statsmodels.api.OLS(Y, X)
    results = model.fit()

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1438654764850,NULL,3744,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    model = statsmodels.api.OLS(Y, X)
    results = model.fit()
    print(results)

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1438654785115,NULL,3747,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    model = statsmodels.api.OLS(Y, X)
    results = model.fit()
    print(results.summary())

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1438654831242,NULL,3753,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    X = numpy.array(x).T
    X = statsmodels.api.add_constant(X)
    results = statsmodels.api.OLS(y, X).fit()

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1438654861137,NULL,3755,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    xT = numpy.array(X).T
    xT = statsmodels.api.add_constant(xT)
    results = statsmodels.api.OLS(Y, xT).fit()

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1438654888888,NULL,3756,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    xT = numpy.array(X).T
    xT = statsmodels.api.add_constant(xT)
    results = statsmodels.api.OLS(Y, xT).fit()
    print(results.summary())

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1439330344488,NULL,90440,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    xT = numpy.array(X).T
    xT = statsmodels.api.add_constant(xT)
    results = statsmodels.api.OLS(Y, xT).fit()
    print(results.summary())

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1439330351239,NULL,90441,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    xT = numpy.array(X).T
    xT = statsmodels.api.add_constant(xT)
    results = statsmodels.api.OLS(Y, xT).fit()
    print(results.summary())

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1439330355172,NULL,90442,1,9,"import statsmodels.api
import numpy
import elice_utils

def main():
    (N, X, Y) = read_data()
    results = do_simple_regression(N, X, Y)

    # 3
    print(elice_utils.visualize(X, Y, results))

def read_data():
    # 1
    N = int(input().strip())

    X = []
    Y = []
    for i in range(0, N):
        splitted = input().strip().split()
        x = float(splitted[0])
        y = float(splitted[1])
        X.append(x)
        Y.append(y)

    return (N, X, Y)

def do_simple_regression(N, X, Y):
    xT = numpy.array(X).T
    xT = statsmodels.api.add_constant(xT)
    results = statsmodels.api.OLS(Y, xT).fit()
    print(results.summary())

    return results

if __name__ == ""__main__"":
    main()",exercise.py,...
1438764241238,NULL,18504,1,10,"import statsmodels.api
import numpy

def main():
    (N, X, Y) = read_data()

    results = do_multivariate_regression(N, X, Y)
    print(results.summary())

    effective_variables = get_effective_variables(results)
    print(effective_variables)

def read_data():
    # 1

    # X must be numpy.array in (30 * 5) shape.
    # Y must be 1-dimensional numpy.array.
    X = numpy.array(X)
    Y = numpy.array(Y)
    return (N, X, Y)

def do_multivariate_regression(N, X, Y):
    # 2

    return results

def get_effective_variables(results):
    eff_vars = []
	# 3

    return eff_vars

def print_students_data():
    with open(""students.dat"") as f:
        for line in f:
            print(line)

if __name__ == ""__main__"":
    main()",exercise.py,...
1439327966855,NULL,90364,1,11,"import numpy
import elice_utils

def main():
    num_flips = int(input())
    prob_head = float(input())

    coin_results = flip_multiple_times(num_flips, prob_head)
    print(visualize(coin_results))

def flip_a_coin(prob_head):
    random_num = numpy.random.random()

    # exercise

def flip_multiple_times(num_flips, prob_head):
    if num_flips > 100000:
        print(""[num_flips] should be less than 100000"")
        num_flips = 100000

    coin_results = []
    for i in range(0, num_flips):
        coin_results.append(flip_a_coin(prob_head))

    return coin_results

def visualize(coin_results):
    num_heads = coin_results.count(""head"")
    num_tails = coin_results.count(""tail"")
    heads_percentage = num_heads / (num_heads + num_tails)
    tails_percentage = num_tails / (num_heads + num_tails)
    return elice_utils.visualize_boxplot(""Coin Flip: %d times"" % (num_heads + num_tails),
        [heads_percentage, tails_percentage],
        [""heads (%)"", ""tails (%)""])

if __name__ == ""__main__"":
    main()",probability.py,...
1439327971080,NULL,90365,1,11,"import numpy
import elice_utils

def main():
    num_flips = int(input())
    prob_head = float(input())

    coin_results = flip_multiple_times(num_flips, prob_head)
    print(visualize(coin_results))

def flip_a_coin(prob_head):
    random_num = numpy.random.random()

    # exercise

def flip_multiple_times(num_flips, prob_head):
    if num_flips > 100000:
        print(""[num_flips] should be less than 100000"")
        num_flips = 100000

    coin_results = []
    for i in range(0, num_flips):
        coin_results.append(flip_a_coin(prob_head))

    return coin_results

def visualize(coin_results):
    num_heads = coin_results.count(""head"")
    num_tails = coin_results.count(""tail"")
    heads_percentage = num_heads / (num_heads + num_tails)
    tails_percentage = num_tails / (num_heads + num_tails)
    return elice_utils.visualize_boxplot(""Coin Flip: %d times"" % (num_heads + num_tails),
        [heads_percentage, tails_percentage],
        [""heads (%)"", ""tails (%)""])

if __name__ == ""__main__"":
    main()",probability.py,...
1439327975032,NULL,90366,1,11,"import numpy
import elice_utils

def main():
    num_flips = int(input())
    prob_head = float(input())

    coin_results = flip_multiple_times(num_flips, prob_head)
    print(visualize(coin_results))

def flip_a_coin(prob_head):
    random_num = numpy.random.random()

    # exercise

def flip_multiple_times(num_flips, prob_head):
    if num_flips > 100000:
        print(""[num_flips] should be less than 100000"")
        num_flips = 100000

    coin_results = []
    for i in range(0, num_flips):
        coin_results.append(flip_a_coin(prob_head))

    return coin_results

def visualize(coin_results):
    num_heads = coin_results.count(""head"")
    num_tails = coin_results.count(""tail"")
    heads_percentage = num_heads / (num_heads + num_tails)
    tails_percentage = num_tails / (num_heads + num_tails)
    return elice_utils.visualize_boxplot(""Coin Flip: %d times"" % (num_heads + num_tails),
        [heads_percentage, tails_percentage],
        [""heads (%)"", ""tails (%)""])

if __name__ == ""__main__"":
    main()",probability.py,...
1439328050059,NULL,90370,1,12,"def main():
    sensitivity = float(input())
    prior_prob = float(input())
    false_alarm = float(input())

    print(""%.2lf%%"" % (100 * mammogram_test(sensitivity, prior_prob, false_alarm)))

def mammogram_test(sensitivity, prior_prob, false_alarm):
    p_a1_b1 = ______ # p(A = 1 | B = 1)

    p_b1 = ______ # p(B = 1)

    p_b0 = ______ # p(B = 0)

    p_a1_b0 = ______ # p(A = 1|B = 0)

    p_a1 = ______ # p(A = 1)

    p_y1_x1 = ______ # p(B = 1|A = 1)

    return p_y1_x1

if __name__ == ""__main__"":
    main()",bayes.py,...
1439328054128,NULL,90371,1,12,"def main():
    sensitivity = float(input())
    prior_prob = float(input())
    false_alarm = float(input())

    print(""%.2lf%%"" % (100 * mammogram_test(sensitivity, prior_prob, false_alarm)))

def mammogram_test(sensitivity, prior_prob, false_alarm):
    p_a1_b1 = ______ # p(A = 1 | B = 1)

    p_b1 = ______ # p(B = 1)

    p_b0 = ______ # p(B = 0)

    p_a1_b0 = ______ # p(A = 1|B = 0)

    p_a1 = ______ # p(A = 1)

    p_y1_x1 = ______ # p(B = 1|A = 1)

    return p_y1_x1

if __name__ == ""__main__"":
    main()",bayes.py,...
1439328058110,NULL,90372,1,12,"def main():
    sensitivity = float(input())
    prior_prob = float(input())
    false_alarm = float(input())

    print(""%.2lf%%"" % (100 * mammogram_test(sensitivity, prior_prob, false_alarm)))

def mammogram_test(sensitivity, prior_prob, false_alarm):
    p_a1_b1 = ______ # p(A = 1 | B = 1)

    p_b1 = ______ # p(B = 1)

    p_b0 = ______ # p(B = 0)

    p_a1_b0 = ______ # p(A = 1|B = 0)

    p_a1 = ______ # p(A = 1)

    p_y1_x1 = ______ # p(B = 1|A = 1)

    return p_y1_x1

if __name__ == ""__main__"":
    main()",bayes.py,...
1439365521063,NULL,93210,1,12,"def main():
    sensitivity = float(input())
    prior_prob = float(input())
    false_alarm = float(input())

    print(""%.2lf%%"" % (100 * mammogram_test(sensitivity, prior_prob, false_alarm)))

def mammogram_test(sensitivity, prior_prob, false_alarm):
    p_a1_b1 = ______ # p(A = 1 | B = 1)

    p_b1 = ______ # p(B = 1)

    p_b0 = ______ # p(B = 0)

    p_a1_b0 = ______ # p(A = 1|B = 0)

    p_a1 = ______ # p(A = 1)

    p_y1_x1 = ______ # p(B = 1|A = 1)

    return p_y1_x1

if __name__ == ""__main__"":
    main()",bayes.py,...
1439328173269,NULL,90373,1,13,"import re

def main():
    sentence = input()
    BOW_dict, BOW = create_BOW(sentence)

    print(BOW_dict)
    print(BOW)

def create_BOW(sentence):
    # Exercise

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",bow.py,...
1439328182655,NULL,90374,1,13,"import re

def main():
    sentence = input()
    BOW_dict, BOW = create_BOW(sentence)

    print(BOW_dict)
    print(BOW)

def create_BOW(sentence):
    # Exercise

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",bow.py,...
1439329949931,NULL,90419,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439329958745,NULL,90421,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439330115226,NULL,90423,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439330121768,NULL,90424,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439330127686,NULL,90425,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439330133436,NULL,90427,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439859533269,NULL,127258,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439859553576,NULL,127262,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439859557215,NULL,127263,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439859571348,NULL,127268,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439859595101,NULL,127270,1,15,"import re
import math

def main():
    # 1
    training_sentence = input()
    training_model = create_BOW(training_sentence)

    # 2
    testing_sentence = input()
    testing_model = create_BOW(testing_sentence)

    # 3
    alpha = float(input())

    print(calculate_doc_prob(training_model, testing_model, alpha))

def calculate_doc_prob(training_model, testing_model, alpha):
    # Implement likelihood function here...
    logprob = 0.5
    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439330159021,NULL,90428,1,16,"import re
import math

def main():
    training1_sentence = input()
    training2_sentence = input()
    testing_sentence = input()

    alpha = float(input())
    prob1 = float(input())
    prob2 = float(input())

    print(naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2))

def naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2):
    # Implement Naive Bayes Algorithm here...

    return normalize_log_prob(classify1, classify2)

def normalize_log_prob(prob1, prob2):
    maxprob = max(prob1, prob2)

    prob1 -= maxprob
    prob2 -= maxprob
    prob1 = math.exp(prob1)
    prob2 = math.exp(prob2)

    normalize_constant = 1.0 / float(prob1 + prob2)
    prob1 *= normalize_constant
    prob2 *= normalize_constant

    return (prob1, prob2)

def calculate_doc_prob(training_model, testing_model, alpha):
    logprob = 0

    num_tokens_training = sum(training_model[1])
    num_words_training = len(training_model[0])

    for word in testing_model[0]:
        word_freq = testing_model[1][testing_model[0][word]]
        word_freq_in_training = 0
        if word in training_model[0]:
            word_freq_in_training = training_model[1][training_model[0][word]]
        for i in range(0, word_freq):
            logprob += math.log(word_freq_in_training + alpha)
            logprob -= math.log(num_tokens_training + num_words_training * alpha)

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439330163414,NULL,90429,1,16,"import re
import math

def main():
    training1_sentence = input()
    training2_sentence = input()
    testing_sentence = input()

    alpha = float(input())
    prob1 = float(input())
    prob2 = float(input())

    print(naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2))

def naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2):
    # Implement Naive Bayes Algorithm here...

    return normalize_log_prob(classify1, classify2)

def normalize_log_prob(prob1, prob2):
    maxprob = max(prob1, prob2)

    prob1 -= maxprob
    prob2 -= maxprob
    prob1 = math.exp(prob1)
    prob2 = math.exp(prob2)

    normalize_constant = 1.0 / float(prob1 + prob2)
    prob1 *= normalize_constant
    prob2 *= normalize_constant

    return (prob1, prob2)

def calculate_doc_prob(training_model, testing_model, alpha):
    logprob = 0

    num_tokens_training = sum(training_model[1])
    num_words_training = len(training_model[0])

    for word in testing_model[0]:
        word_freq = testing_model[1][testing_model[0][word]]
        word_freq_in_training = 0
        if word in training_model[0]:
            word_freq_in_training = training_model[1][training_model[0][word]]
        for i in range(0, word_freq):
            logprob += math.log(word_freq_in_training + alpha)
            logprob -= math.log(num_tokens_training + num_words_training * alpha)

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439330207819,NULL,90430,1,16,"import re
import math

def main():
    training1_sentence = input()
    training2_sentence = input()
    testing_sentence = input()

    alpha = float(input())
    prob1 = float(input())
    prob2 = float(input())

    print(naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2))

def naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2):
    # Implement Naive Bayes Algorithm here...

    return normalize_log_prob(classify1, classify2)

def normalize_log_prob(prob1, prob2):
    maxprob = max(prob1, prob2)

    prob1 -= maxprob
    prob2 -= maxprob
    prob1 = math.exp(prob1)
    prob2 = math.exp(prob2)

    normalize_constant = 1.0 / float(prob1 + prob2)
    prob1 *= normalize_constant
    prob2 *= normalize_constant

    return (prob1, prob2)

def calculate_doc_prob(training_model, testing_model, alpha):
    logprob = 0

    num_tokens_training = sum(training_model[1])
    num_words_training = len(training_model[0])

    for word in testing_model[0]:
        word_freq = testing_model[1][testing_model[0][word]]
        word_freq_in_training = 0
        if word in training_model[0]:
            word_freq_in_training = training_model[1][training_model[0][word]]
        for i in range(0, word_freq):
            logprob += math.log(word_freq_in_training + alpha)
            logprob -= math.log(num_tokens_training + num_words_training * alpha)

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439330211898,NULL,90431,1,16,"import re
import math

def main():
    training1_sentence = input()
    training2_sentence = input()
    testing_sentence = input()

    alpha = float(input())
    prob1 = float(input())
    prob2 = float(input())

    print(naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2))

def naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2):
    # Implement Naive Bayes Algorithm here...

    return normalize_log_prob(classify1, classify2)

def normalize_log_prob(prob1, prob2):
    maxprob = max(prob1, prob2)

    prob1 -= maxprob
    prob2 -= maxprob
    prob1 = math.exp(prob1)
    prob2 = math.exp(prob2)

    normalize_constant = 1.0 / float(prob1 + prob2)
    prob1 *= normalize_constant
    prob2 *= normalize_constant

    return (prob1, prob2)

def calculate_doc_prob(training_model, testing_model, alpha):
    logprob = 0

    num_tokens_training = sum(training_model[1])
    num_words_training = len(training_model[0])

    for word in testing_model[0]:
        word_freq = testing_model[1][testing_model[0][word]]
        word_freq_in_training = 0
        if word in training_model[0]:
            word_freq_in_training = training_model[1][training_model[0][word]]
        for i in range(0, word_freq):
            logprob += math.log(word_freq_in_training + alpha)
            logprob -= math.log(num_tokens_training + num_words_training * alpha)

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",naivebayes.py,...
1439330222657,NULL,90432,1,17,"import re
import os
import math
import elice_utils

def main():
    # Implement main function for Emotion Classifier
    training1_sentences = read_text_data('./txt_sentoken/pos/')
    training2_sentences = read_text_data('./txt_sentoken/neg/')
    testing_sentence = input()

    alpha = 0.1
    prob1 = 0.5
    prob2 = 0.5

    prob_pair = naive_bayes(training1_sentences, training2_sentences, testing_sentence, alpha, prob1, prob2)

    plot_title = testing_sentence
    if len(plot_title) > 50: plot_title = plot_title[:50] + ""...""
    print(elice_utils.visualize_boxplot(plot_title,
                                        list(prob_pair),
                                        ['Positive', 'Negative']))

def naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2):
    # Exercise

    return normalize_log_prob(classify1, classify2)

def read_text_data(directory):
    # We already implemented this function for you
    files = os.listdir(directory)
    files = [f for f in files if f.endswith('.txt')]

    all_text = ''
    for f in files:
        all_text += ' '.join(open(directory + f).readlines()) + ' '

    return all_text

def normalize_log_prob(prob1, prob2):
    maxprob = max(prob1, prob2)

    prob1 -= maxprob
    prob2 -= maxprob
    prob1 = math.exp(prob1)
    prob2 = math.exp(prob2)

    normalize_constant = 1.0 / float(prob1 + prob2)
    prob1 *= normalize_constant
    prob2 *= normalize_constant

    return (prob1, prob2)

def calculate_doc_prob(training_model, testing_model, alpha):
    logprob = 0

    num_tokens_training = sum(training_model[1])
    num_words_training = len(training_model[0])

    for word in testing_model[0]:
        word_freq = testing_model[1][testing_model[0][word]]
        word_freq_in_training = 0
        if word in training_model[0]:
            word_freq_in_training = training_model[1][training_model[0][word]]
        for i in range(0, word_freq):
            logprob += math.log(word_freq_in_training + alpha)
            logprob -= math.log(num_tokens_training + num_words_training * alpha)

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",emotion.py,...
1439330229620,NULL,90433,1,17,"import re
import os
import math
import elice_utils

def main():
    # Implement main function for Emotion Classifier
    training1_sentences = read_text_data('./txt_sentoken/pos/')
    training2_sentences = read_text_data('./txt_sentoken/neg/')
    testing_sentence = input()

    alpha = 0.1
    prob1 = 0.5
    prob2 = 0.5

    prob_pair = naive_bayes(training1_sentences, training2_sentences, testing_sentence, alpha, prob1, prob2)

    plot_title = testing_sentence
    if len(plot_title) > 50: plot_title = plot_title[:50] + ""...""
    print(elice_utils.visualize_boxplot(plot_title,
                                        list(prob_pair),
                                        ['Positive', 'Negative']))

def naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2):
    # Exercise

    return normalize_log_prob(classify1, classify2)

def read_text_data(directory):
    # We already implemented this function for you
    files = os.listdir(directory)
    files = [f for f in files if f.endswith('.txt')]

    all_text = ''
    for f in files:
        all_text += ' '.join(open(directory + f).readlines()) + ' '

    return all_text

def normalize_log_prob(prob1, prob2):
    maxprob = max(prob1, prob2)

    prob1 -= maxprob
    prob2 -= maxprob
    prob1 = math.exp(prob1)
    prob2 = math.exp(prob2)

    normalize_constant = 1.0 / float(prob1 + prob2)
    prob1 *= normalize_constant
    prob2 *= normalize_constant

    return (prob1, prob2)

def calculate_doc_prob(training_model, testing_model, alpha):
    logprob = 0

    num_tokens_training = sum(training_model[1])
    num_words_training = len(training_model[0])

    for word in testing_model[0]:
        word_freq = testing_model[1][testing_model[0][word]]
        word_freq_in_training = 0
        if word in training_model[0]:
            word_freq_in_training = training_model[1][training_model[0][word]]
        for i in range(0, word_freq):
            logprob += math.log(word_freq_in_training + alpha)
            logprob -= math.log(num_tokens_training + num_words_training * alpha)

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",emotion.py,...
1439330236305,NULL,90434,1,17,"import re
import os
import math
import elice_utils

def main():
    # Implement main function for Emotion Classifier
    training1_sentences = read_text_data('./txt_sentoken/pos/')
    training2_sentences = read_text_data('./txt_sentoken/neg/')
    testing_sentence = input()

    alpha = 0.1
    prob1 = 0.5
    prob2 = 0.5

    prob_pair = naive_bayes(training1_sentences, training2_sentences, testing_sentence, alpha, prob1, prob2)

    plot_title = testing_sentence
    if len(plot_title) > 50: plot_title = plot_title[:50] + ""...""
    print(elice_utils.visualize_boxplot(plot_title,
                                        list(prob_pair),
                                        ['Positive', 'Negative']))

def naive_bayes(training1_sentence, training2_sentence, testing_sentence, alpha, prob1, prob2):
    # Exercise

    return normalize_log_prob(classify1, classify2)

def read_text_data(directory):
    # We already implemented this function for you
    files = os.listdir(directory)
    files = [f for f in files if f.endswith('.txt')]

    all_text = ''
    for f in files:
        all_text += ' '.join(open(directory + f).readlines()) + ' '

    return all_text

def normalize_log_prob(prob1, prob2):
    maxprob = max(prob1, prob2)

    prob1 -= maxprob
    prob2 -= maxprob
    prob1 = math.exp(prob1)
    prob2 = math.exp(prob2)

    normalize_constant = 1.0 / float(prob1 + prob2)
    prob1 *= normalize_constant
    prob2 *= normalize_constant

    return (prob1, prob2)

def calculate_doc_prob(training_model, testing_model, alpha):
    logprob = 0

    num_tokens_training = sum(training_model[1])
    num_words_training = len(training_model[0])

    for word in testing_model[0]:
        word_freq = testing_model[1][testing_model[0][word]]
        word_freq_in_training = 0
        if word in training_model[0]:
            word_freq_in_training = training_model[1][training_model[0][word]]
        for i in range(0, word_freq):
            logprob += math.log(word_freq_in_training + alpha)
            logprob -= math.log(num_tokens_training + num_words_training * alpha)

    return logprob

def create_BOW(sentence):
    bow_dict = {}
    bow = []

    sentence = sentence.lower()
    sentence = replace_non_alphabetic_chars_to_space(sentence)
    words = sentence.split(' ')
    for token in words:
        if len(token) < 1: continue
        if token not in bow_dict:
            new_idx = len(bow)
            bow.append(0)
            bow_dict[token] = new_idx
        bow[bow_dict[token]] += 1

    return bow_dict, bow

def replace_non_alphabetic_chars_to_space(sentence):
    return re.sub(r'[^a-z]+', ' ', sentence)

if __name__ == ""__main__"":
    main()",emotion.py,...
1441773962889,NULL,205959,1,18,"# import this module as 'np'
import numpy
# import this module as 'pd'
import pandas

def main():
    A = np.array(['a', 'b', 'c', 'd', 'e'])
    idx = np.array([1, 2, 3, 4, 5])
    s = pd.Series(A, index=idx)

    print(""Success!"")
    return 0

if __name__ == ""__main__"":
    main()",numpy_as.py,...
1441773975329,NULL,205960,1,18,"# import this module as 'np'
import numpy as np
# import this module as 'pd'
import pandas as pd

def main():
    A = np.array(['a', 'b', 'c', 'd', 'e'])
    idx = np.array([1, 2, 3, 4, 5])
    s = pd.Series(A, index=idx)

    print(""Success!"")
    return 0

if __name__ == ""__main__"":
    main()",numpy_as.py,...
1441775049994,NULL,205963,1,18,"a = 'a'
for i in range(50):
    a = a + a",numpy_as.py,...
1439906946134,NULL,133275,1,20,"import sklearn.decomposition
import numpy as np
import pandas as pd
import elice_utils

def main():
    df = input_data()

    # 2
    pca, pca_array = run_PCA(df, 1)

    # 4
    print(elice_utils.draw_toy_example(df, pca, pca_array))

def input_data():
    # 1

    df = pd.DataFrame({'x': X, 'y': Y})
    return df

def run_PCA(dataframe, num_components):
    # 2

    return pca, pca_array

if __name__ == '__main__':
    main()",pca_toy.py,...
1439907005428,NULL,133283,1,20,"import sklearn.decomposition
import numpy as np
import pandas as pd
import elice_utils

def main():
    df = input_data()

    # 2
    pca, pca_array = run_PCA(df, 1)

    # 4
    print(elice_utils.draw_toy_example(df, pca, pca_array))

def input_data():
    # 1

    df = pd.DataFrame({'x': X, 'y': Y})
    return df

def run_PCA(dataframe, num_components):
    # 2

    return pca, pca_array

if __name__ == '__main__':
    print('hello')
    main()",pca_toy.py,...
1439907035099,NULL,133286,1,20,"import sklearn.decomposition
import numpy as np
import pandas as pd
import elice_utils

def main():
    df = input_data()

    # 2
    pca, pca_array = run_PCA(df, 1)

    # 4
    print(elice_utils.draw_toy_example(df, pca, pca_array))

def input_data():
    # 1

    df = pd.DataFrame({'x': X, 'y': Y})
    return df

def run_PCA(dataframe, num_components):
    # 2

    return pca, pca_array

if __name__ == '__main__':
    print('hello')
    main()",pca_toy.py,...
1439907151999,NULL,133301,1,20,"import sklearn.decomposition
import numpy as np
import pandas as pd
import elice_utils

def main():
    df = input_data()

    # 2
    pca, pca_array = run_PCA(df, 1)

    # 4
    print(elice_utils.draw_toy_example(df, pca, pca_array))

def input_data():
    # 1

    df = pd.DataFrame({'x': X, 'y': Y})
    return df

def run_PCA(dataframe, num_components):
    # 2

    return pca, pca_array

if __name__ == '__main__':
    print('hello')
    main()",pca_toy.py,...
1439979387796,NULL,138555,1,20,"import sklearn.decomposition
import numpy as np
import pandas as pd
import elice_utils

def main():
    df = input_data()

    # 2
    pca, pca_array = run_PCA(df, 1)

    # 4
    print(elice_utils.draw_toy_example(df, pca, pca_array))

def input_data():
    # 1

    df = pd.DataFrame({'x': X, 'y': Y})
    return df

def run_PCA(dataframe, num_components):
    # 2

    return pca, pca_array

if __name__ == '__main__':
    print('hello')
    main()",pca_toy.py,...
1439979399565,NULL,138556,1,20,"import sklearn.decomposition
import numpy as np
import pandas as pd
import elice_utils

def main():
    df = input_data()

    # 2
    pca, pca_array = run_PCA(df, 1)

    # 4
    print(elice_utils.draw_toy_example(df, pca, pca_array))

def input_data():
    # 1

    df = pd.DataFrame({'x': X, 'y': Y})
    return df

def run_PCA(dataframe, num_components):
    # 2

    return pca, pca_array

if __name__ == '__main__':
    main()",pca_toy.py,...
1439979394077,NULL,138558,1,20,"import sklearn.decomposition
import numpy as np
import pandas as pd
import elice_utils

def main():
    df = input_data()

    # 2
    pca, pca_array = run_PCA(df, 1)

    # 4
    print(elice_utils.draw_toy_example(df, pca, pca_array))

def input_data():
    # 1

    df = pd.DataFrame({'x': X, 'y': Y})
    return df

def run_PCA(dataframe, num_components):
    # 2

    return pca, pca_array

if __name__ == '__main__':
    main()",pca_toy.py,...
1439812365382,NULL,122998,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, linewidth='0', s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439812408174,NULL,123021,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(b64str)
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, linewidth='0', s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439812429915,NULL,123028,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(len(b64str))
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, linewidth='0', s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439812504603,NULL,123066,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(len(b64str))
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439812522826,NULL,123076,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(len(b64str))
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    print(img_str)
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439812543599,NULL,123089,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(len(b64str))
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    print('::'+img_str)
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439812605363,NULL,123117,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(len(b64str))
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    print('::'+img_str)
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439812889048,NULL,123257,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(len(b64str))
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    print('::'+img_str)
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439813753910,NULL,123590,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(len(b64str))
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    print('::'+img_str)
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439828736596,NULL,126262,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(len(b64str))
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    print('::'+img_str)
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1439859399786,NULL,127247,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import matplotlib as mpl
mpl.use(""Agg"")
import matplotlib.pyplot as plt
import io
import base64
import random

def generate_random_permutation():
    return ''.join(random.choice('0123456789abcdefghijklmnopqrstuvwxyz') for i in range(16))

def generate_base64_image(img_buffer):
    b64str = base64.b64encode(img_buffer.getvalue())
    permutation = generate_random_permutation()
    print(len(b64str))
    img_str = ""<image %s>"" % permutation
    img_str += str(b64str)[2:-1]
    img_str += ""</%s>"" % permutation
    print('::'+img_str)
    return img_str

def wine_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    plt.figure(figsize=(4.5, 4.5))

    class_array = np.array(class_df)
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name, s=4)

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format=""png"")
    img_buffer.seek(0)

    return generate_base64_image(img_buffer)

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)
    # 3
    return pca, pca_array

def draw_graph(pca_array, class_df, class_names = ['Cultivar 1', 'Cultivar 2', 'Cultivar 3']):
    class_array = np.array(class_df)
    plt.figure()
    for c, i, class_name in zip(""rgb"", [1, 2, 3], class_names):
        plt.scatter(pca_array[class_array == i, 0], pca_array[class_array == i, 1], c=c, label=class_name)
    plt.legend(loc=4)
    plt.title('Principal Components of Wine Dataset')

    plt.show()


if __name__ == '__main__':
    main()",pca_classification.py,...
1441774303623,NULL,205961,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import elice_utils

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df =
    feature_df =

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(elice_utils.wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2

    # 3
    return pca, pca_array

if __name__ == '__main__':
    main()",pca_classification.py,...
1441774794037,NULL,205962,1,21,"import sklearn.decomposition
import numpy as np
import pandas as pd
import elice_utils

def main():
    # 1
    wine_df = pd.read_csv('wine.csv')

    class_df =
    feature_df =

    # 2
    pca, pca_array = run_PCA(feature_df, 2)

    # 4
    print(elice_utils.wine_graph(pca_array, class_df))


def run_PCA(dataframe, num_components):
    # 2

    # 3
    return pca, pca_array

if __name__ == '__main__':
    main()",pca_classification.py,...
1440383910139,NULL,158210,1,24,"import numpy as np
import sklearn
import sklearn.metrics
import sklearn.cluster
import sklearn.datasets
import sklearn.decomposition
import sklearn.preprocessing
import elice_utils

def main():
    # 1
    digits = sklearn.datasets.load_digits()
    data = sklearn.preprocessing.scale(digits.data)

    # 2
    # Try looking at different digits by changing index from 0 to 1796.
    print(elice_utils.display_digits(digits, 113))

    # 4
    benchmark(data, digits.target, 1, 64)

def benchmark(data, ground_truth, components_min, components_max):
    np.random.seed(0)

    X = []
    Y = []
    for num_components in range(components_min, components_max):
        X.append(num_components)
        pca_array = run_PCA(data, num_components)
        estimated_classes = run_kmeans(pca_array, 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

        # 4
        score = ___

        Y.append(score)

    print(elice_utils.benchmark_plot(X, Y))
    return Y

def run_PCA(df, num_components):
    # 3
    pca = sklearn.decomposition.PCA(n_components = num_components)
    pca.fit(df)
    pca_array = pca.transform(df)

    return pca_array

def run_kmeans(pca_array, num_clusters, initial_centroid_indices):
    # 3
    initial_centroids = np.array([pca_array[i] for i in initial_centroid_indices])
    classifier = sklearn.cluster.KMeans(n_clusters = num_clusters, n_init = 1, init = initial_centroids)

    classifier.fit(pca_array)
    return classifier.labels_

if __name__ == ""__main__"":
    main()",handwritten.py,...
1440383945249,NULL,158212,1,24,"import numpy as np
import sklearn
import sklearn.metrics
import sklearn.cluster
import sklearn.datasets
import sklearn.decomposition
import sklearn.preprocessing
import elice_utils

def main():
    # 1
    digits = sklearn.datasets.load_digits()
    data = sklearn.preprocessing.scale(digits.data)

    # 2
    # Try looking at different digits by changing index from 0 to 1796.
    print(elice_utils.display_digits(digits, 113))

    # 4
    benchmark(data, digits.target, 1, 64)

def benchmark(data, ground_truth, components_min, components_max):
    np.random.seed(0)

    X = []
    Y = []
    for num_components in range(components_min, components_max):
        X.append(num_components)
        pca_array = run_PCA(data, num_components)
        estimated_classes = run_kmeans(pca_array, 10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

        # 4
        score = ___

        Y.append(score)

    print(elice_utils.benchmark_plot(X, Y))
    return Y

def run_PCA(df, num_components):
    # 3
    pca = sklearn.decomposition.PCA(n_components = num_components)
    pca.fit(df)
    pca_array = pca.transform(df)

    return pca_array

def run_kmeans(pca_array, num_clusters, initial_centroid_indices):
    # 3
    initial_centroids = np.array([pca_array[i] for i in initial_centroid_indices])
    classifier = sklearn.cluster.KMeans(n_clusters = num_clusters, n_init = 1, init = initial_centroids)

    classifier.fit(pca_array)
    return classifier.labels_

if __name__ == ""__main__"":
    print('test')
    main()",handwritten.py,...
1440035150276,NULL,141414,1,25,"import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import numpy as np
import pandas as pd
import elice_utils


def main():
    np.random.seed(108)

    # 1
    noisy_circles = pd.read_csv('noisy_circle.csv')
    noisy_circles = noisy_circles.set_index('index')
    blobs = pd.read_csv('blobs.csv')
    blobs = blobs.set_index('index')

    return draw_graph([noisy_circles, blobs])


def run_kmeans(X, num_clusters):
    # 2


    return kmeans


def draw_graph(datasets, n_clusters=2, alg_name = 'KMeans'):
    plot_num = 1

    elice_utils.draw_init()

    for dataset in datasets:
        # 3


        kmeans_result = run_kmeans(X, n_clusters)

        elice_utils.draw_graph(X, kmeans_result, alg_name, plot_num)
        plot_num += 1

    print(elice_utils.show_graph())

    return kmeans_result


if __name__ == '__main__':
    main()",Kmeans_Toy.py,...
1440410860865,NULL,160022,1,25,"import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import numpy as np
import pandas as pd
import elice_utils


def main():
    np.random.seed(108)

    # 1
    noisy_circles = pd.read_csv('noisy_circle.csv')
    noisy_circles = noisy_circles.set_index('index')
    blobs = pd.read_csv('blobs.csv')
    blobs = blobs.set_index('index')

    return draw_graph([noisy_circles, blobs])


def run_kmeans(X, num_clusters):
    # 2


    return kmeans


def draw_graph(datasets, n_clusters=2, alg_name = 'KMeans'):
    plot_num = 1

    elice_utils.draw_init()

    for dataset in datasets:
        # 3


        kmeans_result = run_kmeans(X, n_clusters)

        elice_utils.draw_graph(X, kmeans_result, alg_name, plot_num)
        plot_num += 1

    print(elice_utils.show_graph())

    return kmeans_result


if __name__ == '__main__':
    main()",Kmeans_Toy.py,...
1440419274585,NULL,162262,1,28,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import elice_utils


def main():
    C = 1.0
    X, y = load_data()

    svc_linear = run_linear_SVM(X, y, C)
    svc_poly2 = run_poly_SVM(X, y, 2, C)
    svc_poly3 = run_poly_SVM(X, y, 3, C)
    svc_rbf = run_rbf_SVM(X, y, C)

    elice_utils.draw_graph(X, y, svc_linear, svc_poly2, svc_poly3, svc_rbf)


def load_data():
    # 1
    blobs = pd.read_csv('blobs.csv')
    blobs = blobs.set_index('index')

    return X, y


def run_linear_SVM(X, y, C):
    # 2


    return svc_linear


def run_poly_SVM(X, y, degree, C):
    # 3


    return svc_poly


def run_rbf_SVM(X, y, C, gamma=0.7):
    # 4


    return svc_rbf


if __name__ == ""__main__"":
    main()",SVM_blobs.py,...
1441759365713,NULL,205935,1,28,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import elice_utils


def main():
    C = 1.0
    X, y = load_data()

    svc_linear = run_linear_SVM(X, y, C)
    svc_poly2 = run_poly_SVM(X, y, 2, C)
    svc_poly3 = run_poly_SVM(X, y, 3, C)
    svc_rbf = run_rbf_SVM(X, y, C)

    elice_utils.draw_graph(X, y, svc_linear, svc_poly2, svc_poly3, svc_rbf)



def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_poly_SVM(X, y, degree, C):
    svc_poly = sklearn.svm.SVC(kernel='poly', degree=degree, C=C).fit(X, y)

    return svc_poly


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def load_data():
    blobs = pd.read_csv('blobs.csv')
    blobs = blobs.set_index('index')

    y = blobs.values[:, 0]
    X = blobs.values[:, 1:]

    return X, y


if __name__ == ""__main__"":
    main()",SVM_blobs.py,...
1441818761810,NULL,206146,1,28,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import elice_utils


def main():
    C = 1.0
    X, y = load_data()

    svc_linear = run_linear_SVM(X, y, C)
    svc_poly2 = run_poly_SVM(X, y, 2, C)
    svc_poly3 = run_poly_SVM(X, y, 3, C)
    svc_rbf = run_rbf_SVM(X, y, C)

    elice_utils.draw_graph(X, y, svc_linear, svc_poly2, svc_poly3, svc_rbf)



def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_poly_SVM(X, y, degree, C):
    svc_poly = sklearn.svm.SVC(kernel='poly', degree=degree, C=C).fit(X, y)

    return svc_poly


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def load_data():
    blobs = pd.read_csv('blobs.csv')
    blobs = blobs.set_index('index')

    y = blobs.values[:, 0]
    X = blobs.values[:, 1:]

    return X, y


if __name__ == ""__main__"":
    main()",SVM_blobs.py,...
1441819031121,NULL,206148,1,28,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import elice_utils


def main():
    C = 1.0
    X, y = load_data()

    svc_linear = run_linear_SVM(X, y, C)
    svc_poly2 = run_poly_SVM(X, y, 2, C)
    svc_poly3 = run_poly_SVM(X, y, 3, C)
    svc_rbf = run_rbf_SVM(X, y, C)

    elice_utils.draw_graph(X, y, svc_linear, svc_poly2, svc_poly3, svc_rbf)



def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_poly_SVM(X, y, degree, C):
    svc_poly = sklearn.svm.SVC(kernel='poly', degree=degree, C=C).fit(X, y)

    return svc_poly


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def load_data():
    blobs = pd.read_csv('blobs.csv')
    blobs = blobs.set_index('index')

    y = blobs.values[:, 0]
    X = blobs.values[:, 1:]

    return X, y


if __name__ == ""__main__"":
    main()",SVM_blobs.py,...
1441819357157,NULL,206156,1,28,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import elice_utils


def main():
    C = 1.0
    X, y = load_data()

    svc_linear = run_linear_SVM(X, y, C)
    svc_poly2 = run_poly_SVM(X, y, 2, C)
    svc_poly3 = run_poly_SVM(X, y, 3, C)
    svc_rbf = run_rbf_SVM(X, y, C)

    elice_utils.draw_graph(X, y, svc_linear, svc_poly2, svc_poly3, svc_rbf)



def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_poly_SVM(X, y, degree, C):
    svc_poly = sklearn.svm.SVC(kernel='poly', degree=degree, C=C).fit(X, y)

    return svc_poly


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def load_data():
    blobs = pd.read_csv('blobs.csv')
    blobs = blobs.set_index('index')

    y = blobs.values[:, 0]
    X = blobs.values[:, 1:]

    return X, y


if __name__ == ""__main__"":
    main()",SVM_blobs.py,...
1441820261389,NULL,206173,1,28,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import elice_utils


def main():
    C = 1.0
    X, y = load_data()

    svc_linear = run_linear_SVM(X, y, C)
    svc_poly2 = run_poly_SVM(X, y, 2, C)
    svc_poly3 = run_poly_SVM(X, y, 3, C)
    svc_rbf = run_rbf_SVM(X, y, C)

    elice_utils.draw_graph(X, y, svc_linear, svc_poly2, svc_poly3, svc_rbf)



def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_poly_SVM(X, y, degree, C):
    svc_poly = sklearn.svm.SVC(kernel='poly', degree=degree, C=C).fit(X, y)

    return svc_poly


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def load_data():
    blobs = pd.read_csv('blobs.csv')
    blobs = blobs.set_index('index')

    y = blobs.values[:, 0]
    X = blobs.values[:, 1:]

    return X, y


if __name__ == ""__main__"":
    main()",SVM_blobs.py,...
1441759424856,NULL,205936,1,29,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation


def main():
    C = 1.0

    X, y = load_data()

    # 2
    X = sklearn.preprocessing.scale(X)

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    svc_linear = run_linear_SVM(X_train, y_train, C)
    svc_poly2 = run_poly_SVM(X_train, y_train, 2, C)
    svc_poly3 = run_poly_SVM(X_train, y_train, 3, C)
    svc_rbf = run_rbf_SVM(X_train, y_train, C)

    model_names = ['Linear', 'Poly degree 2', 'Poly degree 3', 'RBF']
    for model_name, each_model in zip (model_names, [svc_linear, svc_poly2, svc_poly3, svc_rbf]):
        model_score = test_svm_models(X_test, y_test, each_model)
        print('%s score: %f' % (model_name, model_score))



def load_data():
    # 1
    blood_df = pd.read_csv('blood_donation.csv')

    class_array = blood_df.pop('class')
    feature_array = blood_df

    X = feature_array.values
    y = class_array.values

    return X, y

def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_poly_SVM(X, y, degree, C):
    svc_poly = sklearn.svm.SVC(kernel='poly', degree=degree, C=C).fit(X, y)

    return svc_poly


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def test_svm_models(X_test, y_test, each_model):
    score_value = each_model.score(X_test, y_test)

    return score_value

if __name__ == ""__main__"":
    main()",SVM_Other.py,...
1441759481732,NULL,205937,1,30,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import matplotlib.pyplot as plt


def main():
    C_list = [0.1, 1.0, 10.0, 100.0, 1000.0, 10000.0]

    X, y = load_data()

    # 2
    X =

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    for C in C_list:
        svc_rbf = run_rbf_SVM(X_train, y_train, C)

        # 5
        train_score = test_svm_models(?, ?, svc_rbf)
        test_score = test_svm_models(?, ?, svc_rbf)

        print('RBF with C=%5d:\tTrain Acc=%f\tTest Acc=%f' % (C, train_score, test_score))


def load_data():
    # 1


    return X, y


def run_rbf_SVM(X, y, C, gamma=0.7):
    # 3

    return svc_rbf


def test_svm_models(X_data, y_data, each_model):
    # 4

    return score_value


if __name__ == ""__main__"":
    main()",SVM_Other_C.py,...
1441759582171,NULL,205938,1,30,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import matplotlib.pyplot as plt
import sklearn.lda


def main():
    C_list = [0.1, 1.0, 10.0, 100.0, 1000.0, 10000.0]

    X, y = load_data()

    X = sklearn.preprocessing.scale(X)

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    for C in C_list:
        svc_rbf = run_rbf_SVM(X_train, y_train, C)

        train_score = test_svm_models(X_train, y_train, svc_rbf)
        test_score = test_svm_models(X_test, y_test, svc_rbf)

        print 'RBF with C=%7.1f:\tTrain Acc=%f\tTest Acc=%f' % (C, train_score, test_score)


def load_data():
    # 1
    blood_df = pd.read_csv('blood_donation.csv')

    class_array = blood_df.pop('class')
    feature_array = blood_df

    X = feature_array.values
    y = class_array.values

    return X, y


def run_LDA(X, y, num_components):
    lda = sklearn.lda.LDA(n_components=num_components)
    lda_array = lda.fit(X, y).transform(X)

    return lda, lda_array


def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_poly_SVM(X, y, degree, C):
    svc_poly = sklearn.svm.SVC(kernel='poly', degree=degree, C=C).fit(X, y)

    return svc_poly


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def test_svm_models(X_test, y_test, each_model):
    return each_model.score(X_test, y_test)


if __name__ == ""__main__"":
    main()",SVM_Other_C.py,...
1441759601982,NULL,205939,1,30,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import matplotlib.pyplot as plt
import sklearn.lda


def main():
    C_list = [0.1, 1.0, 10.0, 100.0, 1000.0, 10000.0]

    X, y = load_data()

    X = sklearn.preprocessing.scale(X)

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    for C in C_list:
        svc_rbf = run_rbf_SVM(X_train, y_train, C)

        train_score = test_svm_models(X_train, y_train, svc_rbf)
        test_score = test_svm_models(X_test, y_test, svc_rbf)



def load_data():
    # 1
    blood_df = pd.read_csv('blood_donation.csv')

    class_array = blood_df.pop('class')
    feature_array = blood_df

    X = feature_array.values
    y = class_array.values

    return X, y


def run_LDA(X, y, num_components):
    lda = sklearn.lda.LDA(n_components=num_components)
    lda_array = lda.fit(X, y).transform(X)

    return lda, lda_array


def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_poly_SVM(X, y, degree, C):
    svc_poly = sklearn.svm.SVC(kernel='poly', degree=degree, C=C).fit(X, y)

    return svc_poly


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def test_svm_models(X_test, y_test, each_model):
    return each_model.score(X_test, y_test)


if __name__ == ""__main__"":
    main()",SVM_Other_C.py,...
1441759742320,NULL,205940,1,31,"import os
import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import scipy.spatial.distance

def main():
    # 1
    stocks_df, code_to_name = load_data()

    stocks_df = calculate_fluctuations(stocks_df)
    print(stocks_df)

def calculate_fluctuations(stocks_df):
    # 2
    column_list = list(stocks_df.columns)
    for code in column_list:
        if stocks_df.count()[code] < 1400:
            stocks_df.drop(code, 1, inplace=True)

    column_list = list(stocks_df.columns)
    for code in column_list:
        fluctuation = []
        for idx in range(0, stocks_df.shape[0]):
            if idx == 0:
                fluctuation.append(0)
            else:
                yesterday = stocks_df[code][idx-1]
                today = stocks_df[code][idx]
                if np.isnan(yesterday) or np.isnan(today) or yesterday == 0:
                    fluctuation.append(0)
                else:
                    fluctuation.append((today - yesterday) / yesterday)

        stocks_df[code] = fluctuation

    # 3
    return stocks_df

def load_data():
    stocks_df = pd.read_csv(""./stocks.csv"")
    stocks_df = stocks_df.set_index('index')
    krx_listed_companies = pd.read_csv(""./krx_listed_companies.csv"")

    code_to_name = {}
    for code, name in zip(krx_listed_companies['Code'].values, krx_listed_companies['Name'].values):
        z_code = '0' * (6 - len(str(code))) + str(code)
        code_to_name[z_code] = name

    return stocks_df, code_to_name

if __name__ == ""__main__"":
    main()",stocks_fluctuation.py,...
1441759966302,NULL,205941,1,32,"import os
import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import elice_utils
import scipy.spatial.distance
from operator import itemgetter

def main():
    #1 #2
    stocks_df, code_to_name = load_data()

    #3
    stocks_df = stocks_df.transpose()

    # 4
    num_components = 10
    pca_array = run_PCA(stocks_df, num_components)

    # 5
    num_clusters = 20
    cluster_labels = run_kmeans(pca_array, num_clusters, list(range(0, num_clusters)))

    # 6
    display_cluster_idx = 0
    print(elice_utils.plot_stocks(stocks_df, pca_array, cluster_labels, code_to_name, display_cluster_idx))

    # 7
    print(get_closest_stocks(stocks_df, pca_array, code_to_name, ""005930"", 10))

def run_PCA(df, num_components):
    # 4
    pca = sklearn.decomposition.PCA(n_components = num_components)
    pca.fit(df)
    pca_array = pca.transform(df)

    return pca_array

def run_kmeans(pca_array, num_clusters, initial_centroid_indices):
    # 5
    initial_centroids = np.array([pca_array[i] for i in initial_centroid_indices])
    classifier = sklearn.cluster.KMeans(n_clusters = num_clusters, init = initial_centroids, n_init = 1)

    classifier.fit(pca_array)
    return classifier.labels_


def get_closest_stocks(df, pca_array, code_to_name, code, num_stocks_show):
    distance_lists = []
    code_index = df.index.values.tolist().index(code)
    code_xy = pca_array[code_index]

    for code, xy in zip(df.index.values, pca_array):
        distance = scipy.spatial.distance.euclidean(code_xy, xy)
        distance_lists.append([code, distance])

    distance_lists = sorted(distance_lists, key=itemgetter(1))
    return [code_to_name[code_xy[0]] for code_xy in distance_lists[0:num_stocks_show]]

def load_data():
    stocks_df = pd.read_csv(""./stock_fluctuations.csv"")
    stocks_df = stocks_df.set_index('index')
    krx_listed_companies = pd.read_csv(""./krx_listed_companies.csv"")

    code_to_name = {}
    for code, name in zip(krx_listed_companies['Code'].values, krx_listed_companies['Name'].values):
        z_code = '0' * (6 - len(str(code))) + str(code)
        code_to_name[z_code] = name

    return stocks_df, code_to_name

if __name__ == ""__main__"":
    main()",stocks_cluster.py,...
1441760023594,NULL,205942,1,33,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation


def main():
    C = 1.0

    # 1
    X, y = load_data()

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    print(""# Comp\tLinear\tRBF"")
    #print ""All Dimension""
    svc = run_linear_SVM(X_train, y_train, C)
    rbf_svc = run_rbf_SVM(X_train, y_train, C)

    print(""All\t%f\t%f"" % (test_svm_models(X_test, y_test, svc),
                           test_svm_models(X_test, y_test, rbf_svc)))

    # 7
    for num_feature in range(1, 7):
        pca_train, pca_train_arr = run_PCA(X_train, num_feature)

        svc = run_linear_SVM(pca_train_arr, y_train, C)
        rbf_svc = run_rbf_SVM(pca_train_arr, y_train, C)

        pca_test, pca_test_arr = run_PCA(X_test, num_feature)

        print(""%d:\t%f\t%f"" % (num_feature,
                                   test_svm_models(pca_test_arr, y_test, svc),
                                   test_svm_models(pca_test_arr, y_test, rbf_svc)))

def load_data():
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    return feature_df, class_df


def run_PCA(dataframe, num_components):
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)

    return pca, pca_array


def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def test_svm_models(X_test, y_test, each_model):
    return each_model.score(X_test, y_test)


if __name__ == ""__main__"":
    main()",SVM_Wine_PCA_Score.py,...
1441818554393,NULL,206139,1,33,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation


def main():
    C = 1.0

    # 1
    X, y = load_data()

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    print(""# Comp\tLinear\tRBF"")
    #print ""All Dimension""
    svc = run_linear_SVM(X_train, y_train, C)
    rbf_svc = run_rbf_SVM(X_train, y_train, C)

    print(""All\t%f\t%f"" % (test_svm_models(X_test, y_test, svc),
                           test_svm_models(X_test, y_test, rbf_svc)))

    # 7
    for num_feature in range(1, 7):
        pca_train, pca_train_arr = run_PCA(X_train, num_feature)

        svc = run_linear_SVM(pca_train_arr, y_train, C)
        rbf_svc = run_rbf_SVM(pca_train_arr, y_train, C)

        pca_test, pca_test_arr = run_PCA(X_test, num_feature)

        print(""%d:\t%f\t%f"" % (num_feature,
                                   test_svm_models(pca_test_arr, y_test, svc),
                                   test_svm_models(pca_test_arr, y_test, rbf_svc)))

def load_data():
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    return feature_df, class_df


def run_PCA(dataframe, num_components):
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)

    return pca, pca_array


def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def test_svm_models(X_test, y_test, each_model):
    return each_model.score(X_test, y_test)


if __name__ == ""__main__"":
    main()",SVM_Wine_PCA_Score.py,...
1440576824995,NULL,173011,1,34,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda


def main():
    C = 1.0
    # 1
    X, y = load_data()

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    print(""# Comp\tLinear\tRBF"")
    # 6
    svc = run_linear_SVM(?, ?, C)
    rbf_svc = run_rbf_SVM(?, ?, C)

    print(""All\t%f\t%f"" % (test_svm_models(?, ?, svc),
                           test_svm_models(?, ?, rbf_svc)))

    for num_feature in range(1, 7):
        lda_train, lda_train_arr = run_LDA(?, ?, num_feature)

        svc = run_linear_SVM(?, ?, C)
        rbf_svc = run_rbf_SVM(?, ?, C)

        lda_test, lda_test_arr = run_LDA(?, ?, num_feature)

        print(""%d:\t%f\t%f"" % (num_feature,
                                   test_svm_models(?, ?, svc),
                                   test_svm_models(?, ?, rbf_svc)))


def load_data():
    # 1

    return feature_df, class_df

def run_LDA(X, y, num_components):
    # 2

    return lda, lda_array


def run_linear_SVM(X, y, C):
    # 3

    return svc_linear


def run_rbf_SVM(X, y, C, gamma=0.7):
    # 4

    return svc_rbf


def test_svm_models(X_test, y_test, each_model):
    # 5

    return score


if __name__ == ""__main__"":
    main()",SVM_Wine_LDA_Score.py,...
1441760070224,NULL,205943,1,34,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda


def main():
    C = 1.0
    X, y = load_data()

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    print(""# Comp\tLinear\tRBF"")
    svc = run_linear_SVM(X_train, y_train, C)
    rbf_svc = run_rbf_SVM(X_train, y_train, C)

    print(""All\t%f\t%f"" % (test_svm_models(X_test, y_test, svc),
                           test_svm_models(X_test, y_test, rbf_svc)))

    for num_feature in range(1, 7):
        pca_train, pca_train_arr = run_LDA(X_train, y_train, num_feature)

        svc = run_linear_SVM(pca_train_arr, y_train, C)
        rbf_svc = run_rbf_SVM(pca_train_arr, y_train, C)

        pca_test, pca_test_arr = run_LDA(X_test, y_test, num_feature)

        print(""%d:\t%f\t%f"" % (num_feature,
                                   test_svm_models(pca_test_arr, y_test, svc),
                                   test_svm_models(pca_test_arr, y_test, rbf_svc)))


def load_data():
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    return feature_df, class_df

def run_LDA(X, y, num_components):
    lda = sklearn.lda.LDA(n_components=num_components)
    lda_array = lda.fit(X, y).transform(X)

    return lda, lda_array


def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def test_svm_models(X_test, y_test, each_model):
    return each_model.score(X_test, y_test)


if __name__ == ""__main__"":
    main()",SVM_Wine_LDA_Score.py,...
1441818579581,NULL,206140,1,34,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda


def main():
    C = 1.0
    X, y = load_data()

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    print(""# Comp\tLinear\tRBF"")
    svc = run_linear_SVM(X_train, y_train, C)
    rbf_svc = run_rbf_SVM(X_train, y_train, C)

    print(""All\t%f\t%f"" % (test_svm_models(X_test, y_test, svc),
                           test_svm_models(X_test, y_test, rbf_svc)))

    for num_feature in range(1, 7):
        pca_train, pca_train_arr = run_LDA(X_train, y_train, num_feature)

        svc = run_linear_SVM(pca_train_arr, y_train, C)
        rbf_svc = run_rbf_SVM(pca_train_arr, y_train, C)

        pca_test, pca_test_arr = run_LDA(X_test, y_test, num_feature)

        print(""%d:\t%f\t%f"" % (num_feature,
                                   test_svm_models(pca_test_arr, y_test, svc),
                                   test_svm_models(pca_test_arr, y_test, rbf_svc)))


def load_data():
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    return feature_df, class_df

def run_LDA(X, y, num_components):
    lda = sklearn.lda.LDA(n_components=num_components)
    lda_array = lda.fit(X, y).transform(X)

    return lda, lda_array


def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def test_svm_models(X_test, y_test, each_model):
    return each_model.score(X_test, y_test)


if __name__ == ""__main__"":
    main()",SVM_Wine_LDA_Score.py,...
1440590742535,NULL,174577,1,35,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import scipy.spatial.distance
from operator import itemgetter

def main():
    stocks_df, stock_fluctuations_df, code_to_name = load_data()
    # Use stocks_df for your custom SVM classifier.

    features, labels = prepare_svm_features(stock_fluctuations_df, '000030')
    print(svm_with_cross_validation(features, labels))

    #performances, avg_performance = benchmark(stock_fluctuations_df, code_to_name)
    #print(""Average performance is %.2lf%%"" % (avg_performance * 100))

def benchmark(df, code_to_name):
    performances = []
    for quote in df:
        features, labels = prepare_svm_features(df, quote)
        if len(labels) < 1300: continue

        perf = svm_with_cross_validation(features, labels)
        performances.append((quote, code_to_name[quote], perf))

        print((quote, code_to_name[quote], ""%.2f%%"" % (perf * 100)))

    avg_performance = np.mean([x[2] for x in performances])
    return performances

def svm_with_cross_validation(features, labels):
    # Do not modify this line.
    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(features, labels, test_size=0.2, random_state=0)

    # 3
    clf = ...

    return clf.score(X_test, y_test)

def prepare_svm_features(df, code):
    #####################################################################
    # After completing the exercise, feel free to change everything     #
    # in this function and try to develop your custom stock fluctuation #
    # predictor! Please share your own features and algorithms.         #
    #####################################################################

    global NUM_DAYS
    global NUM_QUOTES

    # Let features be the fluctuations of all stocks
    features = df.values
    # Remove first and last fluctuations
    features = features[1:-1]

    # Let labels be the fluctuations of given stock code
    labels = df[code].values
    # Remove first 2 labels to match fluctuation of ""tomorrow's label"" to
    # ""today's all stock fluctuations"" as we want to predict tomorrow's
    # rise/decline given today's fluctuations
    labels = labels[2:]

    # Get the indices having non-NaN values in labels and not zero
    non_NaN_indices = [i for i in range(0, len(labels)) if \
                       not pd.isnull(labels[i]) and not labels[i] == 0]
    # Filter out NaN labels
    features = features[non_NaN_indices]
    labels = labels[non_NaN_indices]

    # Reduce real-number fluctuations into 3 classes in {-1, 0, 1}
    labels = [np.sign(x) for x in labels]

    return features, labels

def load_data():
    stocks_df = pd.read_csv(""./stocks.csv"")
    stocks_df = stocks_df.set_index('index')
    stocks_fl_df = pd.read_csv(""./stock_fluctuations.csv"")
    stocks_fl_df = stocks_fl_df.set_index('index')

    krx_listed_companies = pd.read_csv(""./krx_listed_companies.csv"")

    code_to_name = {}
    for code, name in zip(krx_listed_companies['Code'].values, krx_listed_companies['Name'].values):
        z_code = '0' * (6 - len(str(code))) + str(code)
        code_to_name[z_code] = name

    return stocks_df, stocks_fl_df, code_to_name

if __name__ == ""__main__"":
    main()",stocks_svm.py,...
1441157981838,NULL,194612,1,35,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import scipy.spatial.distance
from operator import itemgetter

def main():
    stocks_df, stock_fluctuations_df, code_to_name = load_data()
    # Use stocks_df for your custom SVM classifier.

    features, labels = prepare_svm_features(stock_fluctuations_df, '000030')
    print(svm_with_cross_validation(features, labels))

    #performances, avg_performance = benchmark(stock_fluctuations_df, code_to_name)
    #print(""Average performance is %.2lf%%"" % (avg_performance * 100))

def benchmark(df, code_to_name):
    performances = []
    for quote in df:
        features, labels = prepare_svm_features(df, quote)
        if len(labels) < 1300: continue

        perf = svm_with_cross_validation(features, labels)
        performances.append((quote, code_to_name[quote], perf))

        print((quote, code_to_name[quote], ""%.2f%%"" % (perf * 100)))

    avg_performance = np.mean([x[2] for x in performances])
    return performances

def svm_with_cross_validation(features, labels):
    # Do not modify this line.
    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(features, labels, test_size=0.2, random_state=0)

    # 3
    clf = sklearn.svm.SVC(kernel='rbf', C=1).fit(X_train, y_train)

    return clf.score(X_test, y_test)

def prepare_svm_features(df, code):
    #####################################################################
    # After completing the exercise, feel free to change everything     #
    # in this function and try to develop your custom stock fluctuation #
    # predictor! Please share your own features and algorithms.         #
    #####################################################################

    global NUM_DAYS
    global NUM_QUOTES

    # Let features be the fluctuations of all stocks
    features = df.values
    # Remove first and last fluctuations
    features = features[1:-1]

    # Let labels be the fluctuations of given stock code
    labels = df[code].values
    # Remove first 2 labels to match fluctuation of ""tomorrow's label"" to
    # ""today's all stock fluctuations"" as we want to predict tomorrow's
    # rise/decline given today's fluctuations
    labels = labels[2:]

    # Get the indices having non-NaN values in labels and not zero
    non_NaN_indices = [i for i in range(0, len(labels)) if \
                       not pd.isnull(labels[i]) and not labels[i] == 0]
    # Filter out NaN labels
    features = features[non_NaN_indices]
    labels = labels[non_NaN_indices]

    # Reduce real-number fluctuations into 3 classes in {-1, 0, 1}
    labels = [np.sign(x) for x in labels]

    return features, labels

def load_data():
    stocks_df = pd.read_csv(""./stocks.csv"")
    stocks_df = stocks_df.set_index('index')
    stocks_fl_df = pd.read_csv(""./stock_fluctuations.csv"")
    stocks_fl_df = stocks_fl_df.set_index('index')

    krx_listed_companies = pd.read_csv(""./krx_listed_companies.csv"")

    code_to_name = {}
    for code, name in zip(krx_listed_companies['Code'].values, krx_listed_companies['Name'].values):
        z_code = '0' * (6 - len(str(code))) + str(code)
        code_to_name[z_code] = name

    return stocks_df, stocks_fl_df, code_to_name

if __name__ == ""__main__"":
    main()",stocks_svm.py,...
1441760388942,NULL,205948,1,35,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import scipy.spatial.distance
from operator import itemgetter

def main():
    stocks_df, stock_fluctuations_df, code_to_name = load_data()
    # Use stocks_df for your custom SVM classifier.

    features, labels = prepare_svm_features(stock_fluctuations_df, '000030')
    print(svm_with_cross_validation(features, labels))

    #performances, avg_performance = benchmark(stock_fluctuations_df, code_to_name)
    #print(""Average performance is %.2lf%%"" % (avg_performance * 100))

def benchmark(df, code_to_name):
    performances = []
    for quote in df:
        features, labels = prepare_svm_features(df, quote)
        if len(labels) < 1300: continue

        perf = svm_with_cross_validation(features, labels)
        performances.append((quote, code_to_name[quote], perf))

        print((quote, code_to_name[quote], ""%.2f%%"" % (perf * 100)))

    avg_performance = np.mean([x[2] for x in performances])
    return performances

def svm_with_cross_validation(features, labels):
    # Do not modify this line.
    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(features, labels, test_size=0.2, random_state=0)

    # 3
    clf = sklearn.svm.SVC(kernel='rbf', C=1).fit(X_train, y_train)

    return clf.score(X_test, y_test)

def prepare_svm_features(df, code):
    #####################################################################
    # After completing the exercise, feel free to change everything     #
    # in this function and try to develop your custom stock fluctuation #
    # predictor! Please share your own features and algorithms.         #
    #####################################################################

    global NUM_DAYS
    global NUM_QUOTES

    # Let features be the fluctuations of all stocks
    features = df.values
    # Remove first and last fluctuations
    features = features[1:-1]

    # Let labels be the fluctuations of given stock code
    labels = df[code].values
    # Remove first 2 labels to match fluctuation of ""tomorrow's label"" to
    # ""today's all stock fluctuations"" as we want to predict tomorrow's
    # rise/decline given today's fluctuations
    labels = labels[2:]

    # Get the indices having non-NaN values in labels and not zero
    non_NaN_indices = [i for i in range(0, len(labels)) if \
                       not pd.isnull(labels[i]) and not labels[i] == 0]
    # Filter out NaN labels
    features = features[non_NaN_indices]
    labels = labels[non_NaN_indices]

    # Reduce real-number fluctuations into 3 classes in {-1, 0, 1}
    labels = [np.sign(x) for x in labels]

    return features, labels

def load_data():
    stocks_df = pd.read_csv(""./stocks.csv"")
    stocks_df = stocks_df.set_index('index')
    stocks_fl_df = pd.read_csv(""./stock_fluctuations.csv"")
    stocks_fl_df = stocks_fl_df.set_index('index')

    krx_listed_companies = pd.read_csv(""./krx_listed_companies.csv"")

    code_to_name = {}
    for code, name in zip(krx_listed_companies['Code'].values, krx_listed_companies['Name'].values):
        z_code = '0' * (6 - len(str(code))) + str(code)
        code_to_name[z_code] = name

    return stocks_df, stocks_fl_df, code_to_name

if __name__ == ""__main__"":
    main()",stocks_svm.py,...
1440580770816,NULL,173331,1,36,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda
import elice_utils

if __name__ == ""__main__"":
    print(open('elice_utils', 'r').read())",SVM_Wine_PCA_LDA_Graph.py,...
1440580779977,NULL,173333,1,36,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda
import elice_utils

if __name__ == ""__main__"":
    print(open('elice_utils.py', 'r').read())",SVM_Wine_PCA_LDA_Graph.py,...
1440580799542,NULL,173335,1,36,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda
import elice_utils

if __name__ == ""__main__"":
    print(open('elice_utils.py', 'r').read())",SVM_Wine_PCA_LDA_Graph.py,...
1440599557389,NULL,175562,1,36,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda
import elice_utils

if __name__ == ""__main__"":
    print(open('elice_utils.py', 'r').read())",SVM_Wine_PCA_LDA_Graph.py,...
1441760261219,NULL,205945,1,36,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda
import elice_utils


def main():
    C = 1.0

    X, y = load_data()

    pca, X_pca = run_PCA(X, 2)
    lda, X_lda = run_LDA(X, y, 2)

    svc_linear_pca = run_linear_SVM(X_pca, y, C)
    svc_rbf_pca = run_rbf_SVM(X_pca, y, C)

    svc_linear_lda = run_linear_SVM(X_lda, y, C)
    svc_rbf_lda = run_rbf_SVM(X_lda, y, C)

    elice_utils.draw_graph(X_pca, X_lda, y, svc_linear_pca, svc_rbf_pca, svc_linear_lda, svc_rbf_lda)
    print(elice_utils.show_graph())


def load_data():
    # 1

    return feature_df, class_df


def run_PCA(dataframe, num_components):
    # 2

    return pca, pca_array


def run_LDA(X, y, num_components):
    # 3

    return lda, lda_array


def run_linear_SVM(X, y, C):
    # 4

    return svc_linear


def run_rbf_SVM(X, y, C, gamma=0.7):
    # 5

    return svc_rbf


if __name__ == ""__main__"":
    main()",SVM_Wine_PCA_LDA_Graph.py,...
1441760273894,NULL,205946,1,36,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda


def main():
    C = 1.0
    X, y = load_data()

    X_train, X_test, y_train, y_test = sklearn.cross_validation.train_test_split(X, y, test_size=0.2, random_state=0)

    print(""# Comp\tLinear\tRBF"")
    svc = run_linear_SVM(X_train, y_train, C)
    rbf_svc = run_rbf_SVM(X_train, y_train, C)

    print(""All\t%f\t%f"" % (test_svm_models(X_test, y_test, svc),
                           test_svm_models(X_test, y_test, rbf_svc)))

    for num_feature in range(1, 7):
        pca_train, pca_train_arr = run_LDA(X_train, y_train, num_feature)

        svc = run_linear_SVM(pca_train_arr, y_train, C)
        rbf_svc = run_rbf_SVM(pca_train_arr, y_train, C)

        pca_test, pca_test_arr = run_LDA(X_test, y_test, num_feature)

        print(""%d:\t%f\t%f"" % (num_feature,
                                   test_svm_models(pca_test_arr, y_test, svc),
                                   test_svm_models(pca_test_arr, y_test, rbf_svc)))


def load_data():
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    return feature_df, class_df

def run_LDA(X, y, num_components):
    lda = sklearn.lda.LDA(n_components=num_components)
    lda_array = lda.fit(X, y).transform(X)

    return lda, lda_array


def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


def test_svm_models(X_test, y_test, each_model):
    return each_model.score(X_test, y_test)


if __name__ == ""__main__"":
    main()",SVM_Wine_PCA_LDA_Graph.py,...
1441760313411,NULL,205947,1,36,"import pandas as pd
import numpy as np
import sklearn.decomposition
import sklearn.preprocessing
import sklearn.cluster
import sklearn.cross_validation
import sklearn.lda
import elice_utils


def main():
    C = 1.0

    X, y = load_data()

    pca, X_pca = run_PCA(X, 2)
    lda, X_lda = run_LDA(X, y, 2)

    svc_linear_pca = run_linear_SVM(X_pca, y, C)
    svc_rbf_pca = run_rbf_SVM(X_pca, y, C)

    svc_linear_lda = run_linear_SVM(X_lda, y, C)
    svc_rbf_lda = run_rbf_SVM(X_lda, y, C)

    elice_utils.draw_graph(X_pca, X_lda, y, svc_linear_pca, svc_rbf_pca, svc_linear_lda, svc_rbf_lda)


def load_data():
    wine_df = pd.read_csv('wine.csv')

    class_df = wine_df.pop('class')
    feature_df = wine_df

    return feature_df, class_df


def run_PCA(dataframe, num_components):
    pca = sklearn.decomposition.PCA(n_components=num_components)
    pca_array = pca.fit(dataframe).transform(dataframe)

    return pca, pca_array


def run_LDA(X, y, num_components):
    lda = sklearn.lda.LDA(n_components=num_components)
    lda_array = lda.fit(X, y).transform(X)

    return lda, lda_array


def run_linear_SVM(X, y, C):
    svc_linear = sklearn.svm.SVC(kernel='linear', C=C).fit(X, y)

    return svc_linear


def run_rbf_SVM(X, y, C, gamma=0.7):
    svc_rbf = sklearn.svm.SVC(kernel='rbf', gamma=gamma, C=C).fit(X, y)

    return svc_rbf


if __name__ == ""__main__"":
    main()",SVM_Wine_PCA_LDA_Graph.py,...
1441783037965,NULL,205980,1,37,"def main():
    while True:
        a = input().strip()
        if a == '':
            print('Bye~')
            return
        print('echo': a)

if __name__ == ""__main__"":
    main()",welcome.py,...
1441783047974,NULL,205981,1,37,"def main():
    while True:
        a = input().strip()
        if a == '':
            print('Bye~')
            return
        print('echo:' + a)

if __name__ == ""__main__"":
    main()",welcome.py,...
1441820558700,NULL,206175,1,37,"def main():
    while True:
        a = input().strip()
        if a == '':
            print('Bye~')
            return
        print('echo:' + a)

if __name__ == ""__main__"":
    main()",welcome.py,...
1441854897840,NULL,206205,1,37,"print('asdf1'
'asdf2'
'asdf3')",welcome.py,...
1441854914697,NULL,206206,1,37,"print('''
asdf1
asdf2
asdf3''')",welcome.py,...
1441854967352,NULL,206207,1,37,"def sprint(msg):
    print('<grader asdfasdfasdfasdf>' + msg + '</asdfasdfasdfasdf>')
    
sprint('test')
sprint('''
asdf1
asdf2
asdf3''')",welcome.py,...
1441854981424,NULL,206208,1,37,"def sprint(msg):
    print('<grader asdfasdfasdfasdf>' + msg + '</asdfasdfasdfasdf>')
    
sprint('test')
sprint('''
asdf1
asdf2
asdf3''')

print('ha')",welcome.py,...
1441855000406,NULL,206209,1,37,"def main():
    print(""Hello World!"")
    
    pass

if __name__ == ""__main__"":
    main()",welcome.py,...
1441855039690,NULL,206212,1,37,"def sprint(msg):
    print('<image asdfasdfasdfasdf>' + msg + '</asdfasdfasdfasdf>')
    
sprint('test')
sprint('''
asdf1
asdf2
asdf3''')

print('ha')",welcome.py,...
1441855046241,NULL,206213,1,37,"def sprint(msg):
    print('<grader asdfasdfasdfasdf>' + msg + '</asdfasdfasdfasdf>')
    
sprint('test')
sprint('''
asdf1
asdf2
asdf3''')

print('ha')",welcome.py,...
1441855006613,NULL,206210,1,38,"def sprint(msg):
    print('<grader asdfasdfasdfasdf>' + msg + '</asdfasdfasdfasdf>')
    
sprint('test')
sprint('''
asdf1
asdf2
asdf3''')

print('ha')",main.py,...
1441855025378,NULL,206211,1,38,"from card5 import *",main.py,...
1441753631429,NULL,205934,1,39,"# date1.py

def _jdayToYMD(jday):
  A = jday + 68569
  B = 4 * A // 146097
  A = A - (146097 * B + 3) // 4
  year = 4000 * (A + 1) // 1461001
  A = A - (1461 * year // 4) + 31
  month = 80 * A // 2447
  day = A - (2447 * month // 80)  
  A = month // 11
  month = month + 2 - (12 * A)
  year = 100 * (B - 49) + year + A
  return year, month, day

class Date():
  def __init__(self, year, month, day):
    self._year = year
    self._month = month
    self._day = day

  def year(self):
    return self._year

  def month(self):
    return self._month

  def day(self):
    return self._day

  def __str__(self):
    return ""%04d/%02d/%02d"" % (self._year, self._month, self._day)

  def _toJulianDay(self):
    tmp = 0
    if self._month < 3:
      tmp = -1
    return (self._day - 32075 + 
            (1461 * (self._year + 4800 + tmp) // 4) + 
            (367 * (self._month - 2 - tmp * 12) // 12) - 
            (3 * ((self._year + 4900 + tmp) // 100) // 4))

  def dayOfWeek(self):
    jday = self._toJulianDay()
    return jday % 7

  def numDays(self, otherDate):
    return otherDate._toJulianDay() - self._toJulianDay()

  def isLeapYear(self):
    return ((self._year % 400 == 0) or
            ((self._year % 4 == 0) and (self._year % 100 != 0)))

  def advanceBy(self, days):
    jday = self._toJulianDay() + days
    y, m, d = _jdayToYMD(jday)
    return Date(y, m, d)

  def printCalendar(self):
    raise NotImplementedError",date1.py,...
1441771361926,NULL,205957,1,39,"# date1.py

def _jdayToYMD(jday):
  A = jday + 68569
  B = 4 * A // 146097
  A = A - (146097 * B + 3) // 4
  year = 4000 * (A + 1) // 1461001
  A = A - (1461 * year // 4) + 31
  month = 80 * A // 2447
  day = A - (2447 * month // 80)  
  A = month // 11
  month = month + 2 - (12 * A)
  year = 100 * (B - 49) + year + A
  return year, month, day

class Date():
  def __init__(self, year, month, day):
    self._year = year
    self._month = month
    self._day = day

  def year(self):
    return self._year

  def month(self):
    return self._month

  def day(self):
    return self._day

  def __str__(self):
    return ""%04d/%02d/%02d"" % (self._year, self._month, self._day)

  def _toJulianDay(self):
    tmp = 0
    if self._month < 3:
      tmp = -1
    return (self._day - 32075 + 
            (1461 * (self._year + 4800 + tmp) // 4) + 
            (367 * (self._month - 2 - tmp * 12) // 12) - 
            (3 * ((self._year + 4900 + tmp) // 100) // 4))

  def dayOfWeek(self):
    jday = self._toJulianDay()
    return jday % 7

  def numDays(self, otherDate):
    return otherDate._toJulianDay() - self._toJulianDay()

  def isLeapYear(self):
    return ((self._year % 400 == 0) or
            ((self._year % 4 == 0) and (self._year % 100 != 0)))

  def advanceBy(self, days):
    jday = self._toJulianDay() + days
    y, m, d = _jdayToYMD(jday)
    return Date(y, m, d)

  def printCalendar(self):
    raise NotImplementedError",date1.py,...
1441820510749,NULL,206174,1,39,"# date1.py

def _jdayToYMD(jday):
  A = jday + 68569
  B = 4 * A // 146097
  A = A - (146097 * B + 3) // 4
  year = 4000 * (A + 1) // 1461001
  A = A - (1461 * year // 4) + 31
  month = 80 * A // 2447
  day = A - (2447 * month // 80)  
  A = month // 11
  month = month + 2 - (12 * A)
  year = 100 * (B - 49) + year + A
  return year, month, day

class Date():
  def __init__(self, year, month, day):
    self._year = year
    self._month = month
    self._day = day

  def year(self):
    return self._year

  def month(self):
    return self._month

  def day(self):
    return self._day

  def __str__(self):
    return ""%04d/%02d/%02d"" % (self._year, self._month, self._day)

  def _toJulianDay(self):
    tmp = 0
    if self._month < 3:
      tmp = -1
    return (self._day - 32075 + 
            (1461 * (self._year + 4800 + tmp) // 4) + 
            (367 * (self._month - 2 - tmp * 12) // 12) - 
            (3 * ((self._year + 4900 + tmp) // 100) // 4))

  def dayOfWeek(self):
    jday = self._toJulianDay()
    return jday % 7

  def numDays(self, otherDate):
    return otherDate._toJulianDay() - self._toJulianDay()

  def isLeapYear(self):
    return ((self._year % 400 == 0) or
            ((self._year % 4 == 0) and (self._year % 100 != 0)))

  def advanceBy(self, days):
    jday = self._toJulianDay() + days
    y, m, d = _jdayToYMD(jday)
    return Date(y, m, d)

  def printCalendar(self):
    raise NotImplementedError",date1.py,...
1441847721874,NULL,206180,1,39,"# date1.py

def _jdayToYMD(jday):
  A = jday + 68569
  B = 4 * A // 146097
  A = A - (146097 * B + 3) // 4
  year = 4000 * (A + 1) // 1461001
  A = A - (1461 * year // 4) + 31
  month = 80 * A // 2447
  day = A - (2447 * month // 80)  
  A = month // 11
  month = month + 2 - (12 * A)
  year = 100 * (B - 49) + year + A
  return year, month, day

class Date():
  def __init__(self, year, month, day):
    self._year = year
    self._month = month
    self._day = day

  def year(self):
    return self._year

  def month(self):
    return self._month

  def day(self):
    return self._day

  def __str__(self):
    return ""%04d/%02d/%02d"" % (self._year, self._month, self._day)

  def _toJulianDay(self):
    tmp = 0
    if self._month < 3:
      tmp = -1
    return (self._day - 32075 + 
            (1461 * (self._year + 4800 + tmp) // 4) + 
            (367 * (self._month - 2 - tmp * 12) // 12) - 
            (3 * ((self._year + 4900 + tmp) // 100) // 4))

  def dayOfWeek(self):
    jday = self._toJulianDay()
    return jday % 7

  def numDays(self, otherDate):
    return otherDate._toJulianDay() - self._toJulianDay()

  def isLeapYear(self):
    return ((self._year % 400 == 0) or
            ((self._year % 4 == 0) and (self._year % 100 != 0)))

  def advanceBy(self, days):
    jday = self._toJulianDay() + days
    y, m, d = _jdayToYMD(jday)
    return Date(y, m, d)

  def printCalendar(self):
    raise NotImplementedError",date1.py,...
1441856030091,NULL,206217,1,39,"# date1.py

def _jdayToYMD(jday):
  A = jday + 68569
  B = 4 * A // 146097
  A = A - (146097 * B + 3) // 4
  year = 4000 * (A + 1) // 1461001
  A = A - (1461 * year // 4) + 31
  month = 80 * A // 2447
  day = A - (2447 * month // 80)  
  A = month // 11
  month = month + 2 - (12 * A)
  year = 100 * (B - 49) + year + A
  return year, month, day

class Date():
  def __init__(self, year, month, day):
    self._year = year
    self._month = month
    self._day = day

  def year(self):
    return self._year

  def month(self):
    return self._month

  def day(self):
    return self._day

  def __str__(self):
    return ""%04d/%02d/%02d"" % (self._year, self._month, self._day)

  def _toJulianDay(self):
    tmp = 0
    if self._month < 3:
      tmp = -1
    return (self._day - 32075 + 
            (1461 * (self._year + 4800 + tmp) // 4) + 
            (367 * (self._month - 2 - tmp * 12) // 12) - 
            (3 * ((self._year + 4900 + tmp) // 100) // 4))

  def dayOfWeek(self):
    jday = self._toJulianDay()
    return jday % 7

  def numDays(self, otherDate):
    return otherDate._toJulianDay() - self._toJulianDay()

  def isLeapYear(self):
    return ((self._year % 400 == 0) or
            ((self._year % 4 == 0) and (self._year % 100 != 0)))

  def advanceBy(self, days):
    jday = self._toJulianDay() + days
    y, m, d = _jdayToYMD(jday)
    return Date(y, m, d)

  def printCalendar(self):
    raise NotImplementedError",date1.py,...
1442375666524,NULL,208793,1,40,"package cs206b;
import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
		// Implement here 
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    System.out.println(s.next());
		}
		
		return '';
	}
}",cs206b/Main.java,...
1442375680752,NULL,208794,1,40,"package cs206b;
import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    System.out.println(s.next());
		}
		
		return """";
	}
}",cs206b/Main.java,...
1442375801491,NULL,208795,1,40,"package cs206b;
import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		StringBuilder sb = new StringBuilder();
		
		for (String line in lines) {
		    sb.insert(0, line);
		}
		
		System.out.println(sb.toString());
		return """";
	}
}",cs206b/Main.java,...
1442375823415,NULL,208796,1,40,"package cs206b;
import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		StringBuilder sb = new StringBuilder();
		
		for (String line : lines) {
		    sb.insert(0, line);
		}
		
		System.out.println(sb.toString());
		return """";
	}
}",cs206b/Main.java,...
1442375868434,NULL,208797,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		StringBuilder sb = new StringBuilder();
		
		for (String line : lines) {
		    sb.insert(0, line);
		}
		
		System.out.println(sb.toString());
		return """";
	}
}",cs206b/Main.java,...
1442375882737,NULL,208798,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		StringBuilder sb = new StringBuilder();
		
		for (String line : lines) {
		    sb.insert(0, line + ""\n"");
		}
		
		System.out.println();
		return sb.toString();
	}
}",cs206b/Main.java,...
1442375891044,NULL,208799,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		StringBuilder sb = new StringBuilder();
		
		for (String line : lines) {
		    sb.insert(0, line + ""\n"");
		}
		
		return sb.toString();
	}
}",cs206b/Main.java,...
1442375897691,NULL,208800,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		StringBuilder sb = new StringBuilder();
		
		for (String line : lines) {
		    sb.insert(0, line + ""\n"");
		}
		
		return sb.toString();
	}
}",cs206b/Main.java,...
1442375956917,NULL,208802,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		StringBuilder sb = new StringBuilder();
		
		for (String line : lines) {
		    sb.insert(0, line + ""\n"");
		}
		return sb.toString();
	}
}",cs206b/Main.java,...
1442403333661,NULL,208974,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		System.out.println(String.join(""\n"", lines));
		
		StringBuilder sb = new StringBuilder();
		
		for (String line : lines) {
		    sb.insert(0, line);
		}
		return sb.toString();
	}
}",cs206b/Main.java,...
1442403530703,NULL,208975,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		StringBuilder sb = new StringBuilder();
		
		for (String line : lines) {
		    if (sb.isEmpty()) {
		        sb.insert(0, line);
		    } else {
		        sb.insert(0, line + '\n')
		    }
		}
		
		return sb.toString();
	}
}",cs206b/Main.java,...
1442403537746,NULL,208976,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    ArrayList<String> lines = new ArrayList<String>();
	    
		Scanner s = new Scanner(System.in);
		while (s.hasNext()) {
		    lines.add(s.next());
		}
		
		StringBuilder sb = new StringBuilder();
		
		for (String line : lines) {
		    if (sb.isEmpty()) {
		        sb.insert(0, line);
		    } else {
		        sb.insert(0, line + '\n');
		    }
		}
		
		return sb.toString();
	}
}",cs206b/Main.java,...
1442403695312,NULL,208980,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442404907655,NULL,208992,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442409757873,NULL,209054,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442410829244,NULL,209091,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
    public Main() {
        
    }
	public static void main(String args[]) {
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442410849241,NULL,209094,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
    public Main(String s) {
        System.out.println(s);
    }
    
	public static void main(String args[]) {
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442410872737,NULL,209095,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
    public Main(String s) {
        System.out.println(s);
    }
    
	public static void main(String args[]) {
	    Main m = Main(""asdf"");
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442410881885,NULL,209096,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
    public Main(String s) {
        System.out.println(s);
    }
    
	public static void main(String args[]) {
	    Main m = new Main(""asdf"");
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442410908657,NULL,209098,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
    char[] a;
    
    public Main(String s) {
        System.out.println(s);
    }
    
	public static void main(String args[]) {
	    Main m = new Main(""asdf"");
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442410961555,NULL,209101,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
    char[] a;
    
    public Main(String s) {
        System.out.println(s);
        int a = 10;
        char b = new char[a];
    }
    
	public static void main(String args[]) {
	    Main m = new Main(""asdf"");
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442410978427,NULL,209102,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
    char[] a;
    
    public Main(String s) {
        System.out.println(s);
        int a = 10;
        char[] b = new char[a];
    }
    
	public static void main(String args[]) {
	    Main m = new Main(""asdf"");
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442410994537,NULL,209103,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
    char[] a;
    
    public Main(String s) {
        System.out.println(s);
        int a = 10;
        char[] b = new char[a];
    }
    
	public static void main(char[] args) {
	    Main m = new Main(""asdf"");
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442424076096,NULL,209517,1,40,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
    char[] a;
    
    public Main(String s) {
        System.out.println(s);
        int a = 10;
        char[] b = new char[a];
    }
    
	public static void main(char[] args) {
	    Main m = new Main(""asdf"");
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442424086831,NULL,209518,1,40,"package cs206b;
import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
		// Implement here 
		
	}
}",cs206b/Main.java,...
1442424127126,NULL,209519,1,40,"package cs206b;
import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
		// Implement here 
		return ""asdf"";
	}
}",cs206b/Main.java,...
1442466990220,NULL,209829,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		
		String rev = reverse();
		System.out.println(rev);
	}
}",cs206b/Main.java,...
1442467082502,NULL,209832,1,40,"package cs206b;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;


public class Main {
	public static void ma
}",cs206b/Main.java,...
1442660442000,NULL,212202,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String input = new String("""");
        while(in.ready()){
            input +=in.readLine();
            input +='\n';
            
        }
        int[] check = new int[input.length()];
        int num=0;
        for(int i=0;i<input.length();i++){
            if (input.charAt(i)=='\n'){
                num++;
            }
        }
        int[] Line_change = new int[num+1];
        num = 0;
        for(int i=0;i<input.length();i++){
            if (input.charAt(i)=='\n'){
                Line_change[num] = i;
                num++;
            }
        }
        Line_change[num] = input.length();
        String[] inputString = new String[num];
        for(int i=0;i<num;i++){
            inputString[i]= new String("""");
        }
        if(num>0){
        for(int i=0;i<Line_change[0];i++){
            inputString[0] +=input.charAt(i); 
        }
        }
        if(num>1){
        for(int i=1;i<num;i++){
            for(int j=Line_change[i-1]+1; j<Line_change[i];j++){
                inputString[i] +=input.charAt(j);
            }
            
        }
        }
                String Reversed = new String("""");
        for(int i=num-1;i>=0;i--){
            Reversed +=inputString[i];
            if(i!=0){
                Reversed+=""\n"";
            }
}
        return Reversed;	    
        }

	}",cs206b/Main.java,...
1442804418778,NULL,215429,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        if (isFirst) {
	            sb.insert(0, s.readLine());
	            isFirst = false;
	        } else {
	            sb.insert(0, s.readLine() + ""\n"");
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804482003,NULL,215430,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        if (isFirst) {
	            sb.insert(0, s.next());
	            isFirst = false;
	        } else {
	            sb.insert(0, s.next() + ""\n"");
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804580417,NULL,215431,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        if (isFirst) {
	            sb.insert(0, s.next());
	            isFirst = false;
	        } else {
	            sb.insert(0, s.next() + ""\n"");
	            System.out.println(""H"")
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804584627,NULL,215432,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        if (isFirst) {
	            sb.insert(0, s.next());
	            isFirst = false;
	        } else {
	            sb.insert(0, s.next() + ""\n"");
	            System.out.println(""H"");
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804597935,NULL,215433,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        if (isFirst) {
	            sb.insert(0, s.next());
	            isFirst = false;
	        } else {
	            sb.insert(0, s.next() + ""\n"");
	            System.out.println(s.next());
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804615674,NULL,215434,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        if (isFirst) {
	            sb.insert(0, s.next() + ""\n"");
	            isFirst = false;
	        } else {
	            sb.insert(0, s.next());
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804624202,NULL,215435,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        if (isFirst) {
	            sb.insert(0, s.next());
	            isFirst = false;
	        } else {
	            sb.insert(0, s.next() + ""\n"");
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804662037,NULL,215436,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        String line = s.next();
	        
	        System.out.println(line.length);
	        if (isFirst) {
	            sb.insert(0, line);
	            isFirst = false;
	        } else {
	            sb.insert(0, s.line + ""\n"");
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804674875,NULL,215437,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        String line = s.next();
	        
	        System.out.println(line);
	        if (isFirst) {
	            sb.insert(0, line);
	            isFirst = false;
	        } else {
	            sb.insert(0, s.line + ""\n"");
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804680047,NULL,215438,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNext()) {
	        String line = s.next();
	        
	        System.out.println(line);
	        if (isFirst) {
	            sb.insert(0, line);
	            isFirst = false;
	        } else {
	            sb.insert(0, line + ""\n"");
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804791617,NULL,215439,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNextLine()) {
	        String line = s.nextLine();
	        
	        System.out.println(line);
	        if (isFirst) {
	            sb.insert(0, line);
	            isFirst = false;
	        } else {
	            sb.insert(0, line + ""\n"");
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442804798813,NULL,215440,1,40,"package cs206b;

import java.io.*;
import java.util.Scanner;


public class Main {
	public static void main(String args[]) {
		String rev = reverse();
		System.out.println(rev);
	}
	public static String reverse() {
	    Scanner s = new Scanner(System.in);
	    StringBuilder sb = new StringBuilder();
	    boolean isFirst = true;
	    
	    while (s.hasNextLine()) {
	        String line = s.nextLine();
	        
	        if (isFirst) {
	            sb.insert(0, line);
	            isFirst = false;
	        } else {
	            sb.insert(0, line + ""\n"");
	        }
	    }
	    
	    return sb.toString();
    }

}",cs206b/Main.java,...
1442390556559,NULL,208901,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.println(file)
            }
        }
	}
	
}",cs206b/Main.java,...
1442390563546,NULL,208902,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.println(file);
            }
        }
	}
	
}",cs206b/Main.java,...
1442390596439,NULL,208903,1,41,"package cs206b;
import java.io.*;
import java.util.*;
import java.nio.*;

public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.println(file);
            }
        }
	}
	
}",cs206b/Main.java,...
1442390621679,NULL,208904,1,41,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.println(file);
            }
        }
	}
	
}",cs206b/Main.java,...
1442390648203,NULL,208905,1,41,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        }
	}
	
}",cs206b/Main.java,...
1442390686474,NULL,208906,1,41,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442390699176,NULL,208907,1,41,"package cs206b;
import java.io.*;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import static java.nio.file.FileVisitResult.*;
import static java.nio.file.FileVisitOption.*;

public class Main {
	public static void main(String args[]) {
	    Path dir = Paths.get(""./cs206b/"");

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, ""*"")) {
            for (Path file : stream) {
                System.out.println(file);
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
	}
	
}",cs206b/Main.java,...
1442403804535,NULL,208981,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		
		double p = 1.0;
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) days[rand.nextInt(365)]++;
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt += 1;
		            break;
		        }
		    }
		}
		
		p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442403982172,NULL,208982,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		
		double p = 1.0;
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442404032868,NULL,208983,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442404092703,NULL,208984,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442404101831,NULL,208985,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            //break;
		        }
		    }
		}
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442404124996,NULL,208986,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            //break;
		        }
		    }
		}
		
		System.out.println(cnt);
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442404140539,NULL,208987,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		System.out.println(cnt);
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442404174135,NULL,208988,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		System.out.println(n);
		System.out.println(m);
		System.out.println(cnt);
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442404228628,NULL,208990,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            //break;
		        }
		    }
		}
		
		System.out.println(n);
		System.out.println(m);
		System.out.println(cnt);
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442404245560,NULL,208991,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442405030632,NULL,208993,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442412636696,NULL,209134,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442424189096,NULL,209520,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442424284308,NULL,209522,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 0) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442424292812,NULL,209523,1,41,"package cs206b;
import java.io.*;
import java.util.*;


public class Main {
	public static void main(String args[]) {
		try {	
				
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int n = Integer.parseInt(br.readLine()) ;
			int m = Integer.parseInt(br.readLine());
			Random rand = new Random(123);// don't change this line 
			
			double probability = paradoxProb(n,m,rand); 
			
			System.out.println(probability);
			
		}catch(IOException io) {
			System.out.println(io);
		}
	}
	public static double paradoxProb(int n, int m , Random rand) {
		int cnt = 0;

		for (int i=0; i<m; i++) {
		    int[] days = new int[365];
		    for (int j=0; j<n; j++) {
		        int manDay = rand.nextInt(365);
		        days[manDay]++;
		    }
		    for (int j=0; j<365; j++) {
		        if (days[j] > 1) {
		            cnt++;
		            break;
		        }
		    }
		}
		
		double p = cnt / (double)m;
		
		return p; 
	}
	
}",cs206b/Main.java,...
1442804953464,NULL,215441,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

		Scanner s = new Scanner(new FileReader(filename));

		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		// implement here

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442805151733,NULL,215443,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

		Scanner s = new Scanner(new FileReader(filename));
	    while (s.hasNextLine()) {
            document.append(s.nextLine());
	    }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = document.charAt(i);
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442805188680,NULL,215445,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = document.charAt(i);
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442805236067,NULL,215447,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNex()) {
                document.append(s.next());
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = document.charAt(i);
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442805241929,NULL,215448,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNext()) {
                document.append(s.next());
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = document.charAt(i);
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442805321867,NULL,215449,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	BufferedReader  s = new BufferedReader (new FileReader(filename));
        	String line;
            while ((line = s.readLine()) != null) {
                document.append(line);
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = document.charAt(i);
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442805339339,NULL,215450,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = document.charAt(i);
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442805388107,NULL,215451,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = document.charAt(i).toLowerCase();
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442805394168,NULL,215452,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = document.charAt(i).toLowercase();
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442805433789,NULL,215453,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = Character.toLowerCase(document.charAt(i));
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442924444956,NULL,218594,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {

		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				map.put(c, new Integer(val + 1));

			}else{

				map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924524674,NULL,218596,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {

		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];


		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924539032,NULL,218598,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {

		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924551843,NULL,218599,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {

		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();


		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924564168,NULL,218600,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {

		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();
		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924612041,NULL,218601,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {

		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				// map.put(c, new Integer(val + 1));

			}else{

				// map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

// 			frequency[i] = map.get(alphabet.charAt(i));

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924620991,NULL,218602,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {

		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				// map.put(c, new Integer(val + 1));

			}else{

				// map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924638872,NULL,218603,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {

		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				map.put(c, new Integer(val + 1));

			}else{

				map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924708681,NULL,218604,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {
		try {
		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);
		} catch (Exception ex) {
			sprint(""Can't grade due to the code error!"");
			sprint(ex.getMessage());
		}

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				map.put(c, new Integer(val + 1));

			}else{

				map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924725224,NULL,218605,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {
		try {
		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);
		} catch (Exception ex) {
			System.out.println(""Can't grade due to the code error!"");
			System.out.println(ex.getMessage());
		}

	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				map.put(c, new Integer(val + 1));

			}else{

				map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924791612,NULL,218607,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

// 		StringBuilder document = readDocument(""./data/input.txt"");		

// 		int[] freq = frequencyDoc(document);

// 		printFreq(freq);

		StringBuilder d1 = Main.readDocument(""./data/input.txt"");

		String s1 = d1.toString(); 

		int[] f1 = Main.frequencyDoc(d1);
		
	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				map.put(c, new Integer(val + 1));

			}else{

				map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442924815100,NULL,218608,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

// 		StringBuilder document = readDocument(""./data/input.txt"");		

// 		int[] freq = frequencyDoc(document);

// 		printFreq(freq);

		StringBuilder d1 = Main.readDocument(""./data/input.txt"");

		String s1 = d1.toString(); 

		int[] f1 = Main.frequencyDoc(d1);
		printFreq(f1);
	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				map.put(c, new Integer(val + 1));

			}else{

				map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442925578702,NULL,218612,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

// 		StringBuilder document = readDocument(""./data/input.txt"");		

// 		int[] freq = frequencyDoc(document);

// 		printFreq(freq);

		StringBuilder d1 = Main.readDocument(""./data/input.txt"");

		String s1 = d1.toString(); 

		int[] f1 = Main.frequencyDoc(d1);
		printFreq(f1);
	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				map.put(c, new Integer(val + 1));

			}else{

				map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));
			if (frequency[i] == null)
			    frequency[i] = 0;

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442925587514,NULL,218613,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);
	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				map.put(c, new Integer(val + 1));

			}else{

				map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			frequency[i] = map.get(alphabet.charAt(i));
			if (frequency[i] == null)
			    frequency[i] = 0;

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442925614318,NULL,218614,1,42,"package cs206b;



import java.io.*;

import java.util.*;



public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		StringBuilder document = readDocument(""./data/input.txt"");		

		int[] freq = frequencyDoc(document);

		printFreq(freq);
	}



	public static StringBuilder readDocument(String filename) {

		StringBuilder document = new StringBuilder("""");



		// implement here

		try{

			Scanner in = new Scanner(new File(filename));

			while(in.hasNextLine()){

				document.append(in.nextLine());

			}

		}catch(IOException ex){

		    ex.printStackTrace();

		}

		

		return document;

	}

	

	public static int[] frequencyDoc(StringBuilder document) {

		int[] frequency = new int[26];



		// implement here

		String s = document.toString();

		s = s.toLowerCase();

		HashMap<Character,Integer> map = new HashMap<Character,Integer>();

		for(int i = 0; i < s.length(); i++){

			char c = s.charAt(i);

			Integer val = map.get(new Character(c));

			if(val != null){

				map.put(c, new Integer(val + 1));

			}else{

				map.put(c,1);

			}

		}

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for(int i = 0; i < 26; i++){

			Integer cnt = map.get(alphabet.charAt(i));
			if (cnt == null)
			    frequency[i] = 0;
			else
			    frequency[i] = cnt;

		}

		

		return frequency; 

	}

	

	public static void printFreq(int[] freq) {

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";

		for (int i=0; i<freq.length; i++) {

			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);

		}

	}

}",cs206b/Main.java,...
1442925695760,NULL,218615,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = Character.toLowerCase(document.charAt(i));
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1443003103195,NULL,219986,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        
        System.out.println(document);
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = Character.toLowerCase(document.charAt(i));
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1443003811431,NULL,220031,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
                if (s.hasNextLine()) {
                    document.append(""\n"")
                }
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        
        System.out.println(document);
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = Character.toLowerCase(document.charAt(i));
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1443003815671,NULL,220032,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
                if (s.hasNextLine()) {
                    document.append(""\n"");
                }
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        
        System.out.println(document);
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = Character.toLowerCase(document.charAt(i));
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1443003879446,NULL,220037,1,42,"package cs206b;

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String args[]) {
		StringBuilder document = readDocument(""./data/input.txt"");		
		int[] freq = frequencyDoc(document);
		printFreq(freq);
	}

	public static StringBuilder readDocument(String filename) {
		StringBuilder document = new StringBuilder("""");

        try {
        	Scanner s = new Scanner(new FileReader(filename));
            while (s.hasNextLine()) {
                document.append(s.nextLine());
                if (s.hasNextLine()) {
                    document.append(""\n"");
                }
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        
        System.out.println(document);
	    
		return document;
	}
	
	public static int[] frequencyDoc(StringBuilder document) {
		int[] frequency = new int[26];

		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<document.length(); i++) {
		    char c = Character.toLowerCase(document.charAt(i));
		    int idx;
		    if ((idx = alphabet.indexOf(c)) != -1) {
		        frequency[idx]++;
		    }
		}

		return frequency; 
	}
	
	public static void printFreq(int[] freq) {
		String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
		for (int i=0; i<freq.length; i++) {
			System.out.println(alphabet.charAt(i) + "": "" + freq[i]);
		}
	}
}",cs206b/Main.java,...
1442638873940,NULL,211605,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442639057156,NULL,211607,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader(bs);
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442641273470,NULL,211719,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader(bs);
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442641575793,NULL,211732,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442641737198,NULL,211737,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
		myReader.buy(1, bs);
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(2, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		myReader.buy(4, bs);
		
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(5, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
		
// 		String text1 = myReader.read(9);
// 		String text2 = myReader.read(""Machine Learning"");
// 		String listId = myReader.showBookList(true);
// 		String listAlphabet = myReader.showBookList(false);
		
// 		System.out.println(""\nShowing my book list by id order."");
// 		System.out.println(listId);
// 		System.out.println(""Showing my book list by alphabetical order."");
// 		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442641757904,NULL,211739,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
		myReader.buy(1, bs);
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(2, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		myReader.buy(4, bs);
		
		String text1 = myReader.read(8);
		String text3 = myReader.read(4);
		String text5 = myReader.read(""Machine Learning"");

		String text7 = myReader.showBookList(true);

		String text9 = myReader.showBookList(false);
		
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(5, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
		
// 		String text1 = myReader.read(9);
// 		String text2 = myReader.read(""Machine Learning"");
// 		String listId = myReader.showBookList(true);
// 		String listAlphabet = myReader.showBookList(false);
		
// 		System.out.println(""\nShowing my book list by id order."");
// 		System.out.println(listId);
// 		System.out.println(""Showing my book list by alphabetical order."");
// 		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442641811664,NULL,211746,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
		myReader.buy(1, bs);
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(2, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		myReader.buy(4, bs);
		
// 		String text1 = myReader.read(8);
		String text3 = myReader.read(4);
		String text5 = myReader.read(""Machine Learning"");
		String text7 = myReader.showBookList(true);
		String text9 = myReader.showBookList(false);
		
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(5, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
		
// 		String text1 = myReader.read(9);
// 		String text2 = myReader.read(""Machine Learning"");
// 		String listId = myReader.showBookList(true);
// 		String listAlphabet = myReader.showBookList(false);
		
// 		System.out.println(""\nShowing my book list by id order."");
// 		System.out.println(listId);
// 		System.out.println(""Showing my book list by alphabetical order."");
// 		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442641818120,NULL,211747,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
		myReader.buy(1, bs);
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(2, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		myReader.buy(4, bs);
		
		String text1 = myReader.read(8);
		String text3 = myReader.read(4);
		String text5 = myReader.read(""Machine Learning"");
		String text7 = myReader.showBookList(true);
		String text9 = myReader.showBookList(false);
		
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(5, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
		
// 		String text1 = myReader.read(9);
// 		String text2 = myReader.read(""Machine Learning"");
// 		String listId = myReader.showBookList(true);
// 		String listAlphabet = myReader.showBookList(false);
		
// 		System.out.println(""\nShowing my book list by id order."");
// 		System.out.println(listId);
// 		System.out.println(""Showing my book list by alphabetical order."");
// 		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442642134220,NULL,211755,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
// 		myReader.buy(1, bs);
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(2, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
// 		myReader.buy(4, bs);
		
// 		String text1 = myReader.read(8);
// 		String text3 = myReader.read(4);
// 		String text5 = myReader.read(""Machine Learning"");
// 		String text7 = myReader.showBookList(true);
// 		String text9 = myReader.showBookList(false);
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442644472543,NULL,211814,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
// 		myReader.buy(1, bs);
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(2, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
// 		myReader.buy(4, bs);
		
// 		String text1 = myReader.read(8);
// 		String text3 = myReader.read(4);
// 		String text5 = myReader.read(""Machine Learning"");
// 		String text7 = myReader.showBookList(true);
// 		String text9 = myReader.showBookList(false);
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442644580469,NULL,211815,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
// 		myReader.buy(1, bs);
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(2, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
// 		myReader.buy(4, bs);
		
// 		String text1 = myReader.read(8);
// 		String text3 = myReader.read(4);
// 		String text5 = myReader.read(""Machine Learning"");
// 		String text7 = myReader.showBookList(true);
// 		String text9 = myReader.showBookList(false);
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442737605214,NULL,213427,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
// 		myReader.buy(1, bs);
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(2, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
// 		myReader.buy(4, bs);
		
// 		String text1 = myReader.read(8);
// 		String text3 = myReader.read(4);
// 		String text5 = myReader.read(""Machine Learning"");
// 		String text7 = myReader.showBookList(true);
// 		String text9 = myReader.showBookList(false);
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442997352174,NULL,219750,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
// 		myReader.buy(1, bs);
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(2, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
// 		myReader.buy(4, bs);
		
// 		String text1 = myReader.read(8);
// 		String text3 = myReader.read(4);
// 		String text5 = myReader.read(""Machine Learning"");
// 		String text7 = myReader.showBookList(true);
// 		String text9 = myReader.showBookList(false);
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1443030885559,NULL,221780,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
// 		myReader.buy(1, bs);
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(2, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
// 		myReader.buy(4, bs);
		
// 		String text1 = myReader.read(8);
// 		String text3 = myReader.read(4);
// 		String text5 = myReader.read(""Machine Learning"");
// 		String text7 = myReader.showBookList(true);
// 		String text9 = myReader.showBookList(false);
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(9);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1443031167188,NULL,221793,1,43,"package cs206b;

import java.io.*;
import java.util.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 
import cs206b.ebookReader;


public class Main {
	public static void main(String args[]) {
		BookStore bs = new BookStore();
		bs.show();
		
		ebookReader myReader = new ebookReader();
		
// 		myReader.buy(1, bs);
// 		myReader.buy(""How Nature Works"", bs);
// 		myReader.buy(2, bs);
// 		myReader.buy(1, bs);
// 		myReader.buy(""To Kill a Mockingbird"", bs);
// 		myReader.buy(4, bs);
		
// 		String text1 = myReader.read(8);
// 		String text3 = myReader.read(4);
// 		String text5 = myReader.read(""Machine Learning"");
// 		String text7 = myReader.showBookList(true);
// 		String text9 = myReader.showBookList(false);
		
		myReader.buy(""How Nature Works"", bs);
		myReader.buy(5, bs);
		myReader.buy(1, bs);
		myReader.buy(""To Kill a Mockingbird"", bs);
		
		String text1 = myReader.read(8);
		String text2 = myReader.read(""Machine Learning"");
		String listId = myReader.showBookList(true);
		String listAlphabet = myReader.showBookList(false);
		
		System.out.println(""\nShowing my book list by id order."");
		System.out.println(listId);
		System.out.println(""Showing my book list by alphabetical order."");
		System.out.println(listAlphabet);
	}
}",cs206b/Main.java,...
1442639052127,NULL,211606,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store ) {
		//implement here
	}
	
	public void buy(int id, BookStore store) {
		//implement here

	}
	
	public String read(String name) {
		String content = """";
		//implement here
		return content;
	}
	
	public String read(int id) {
		String content = """";
		//implement here
		return content;
	}
	

	public String showBookList(boolean option) {
		String list = """";
		//implement here
		return list;
	}
}",cs206b/ebookReader.java,...
1442639074182,NULL,211608,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	BookStore bs;
	
	public ebookReader(BookStore bs) {
	    bookList = new SinglyLinkedList();
	    bs = bs;
	}
	
	public void buy(String name, BookStore store ) {
		//implement here
	}
	
	public void buy(int id, BookStore store) {
		//implement here

	}
	
	public String read(String name) {
		String content = """";
		//implement here
		return content;
	}
	
	public String read(int id) {
		String content = """";
		//implement here
		return content;
	}
	

	public String showBookList(boolean option) {
		String list = """";
		//implement here
		return list;
	}
}",cs206b/ebookReader.java,...
1442639114221,NULL,211610,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader(BookStore bs) {
	    bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		//implement here
	}
	
	public void buy(int id, BookStore store) {
		//implement here

	}
	
	public String read(String name) {
		String content = """";
		//implement here
		return content;
	}
	
	public String read(int id) {
		String content = """";
		//implement here
		return content;
	}
	

	public String showBookList(boolean option) {
		String list = """";
		//implement here
		return list;
	}
}",cs206b/ebookReader.java,...
1442639209764,NULL,211611,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader(BookStore bs) {
	    bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		bookList.append(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		bookList.append(item);
	}
	
	public String read(String name) {
		String content = """";
		//implement here
		return content;
	}
	
	public String read(int id) {
		String content = """";
		//implement here
		return content;
	}
	

	public String showBookList(boolean option) {
		String list = """";
		//implement here
		return list;
	}
}",cs206b/ebookReader.java,...
1442639556651,NULL,211627,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader(BookStore bs) {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		bookList.append(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		bookList.append(item);
	}
	
	public String read(String name) {
		String content = """";
		//implement here
		return content;
	}
	
	public String read(int id) {
		String content = """";
		//implement here
		return content;
	}
	

	public String showBookList(boolean option) {
		String list = """";
		//implement here
		return list;
	}
}",cs206b/ebookReader.java,...
1442639562980,NULL,211628,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader(BookStore bs) {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.append(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.append(item);
	}
	
	public String read(String name) {
		String content = """";
		//implement here
		return content;
	}
	
	public String read(int id) {
		String content = """";
		//implement here
		return content;
	}
	

	public String showBookList(boolean option) {
		String list = """";
		//implement here
		return list;
	}
}",cs206b/ebookReader.java,...
1442640354817,NULL,211685,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader(BookStore bs) {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
		String content = """";
		//implement here
		return content;
	}
	
	public String read(int id) {
		String content = """";
		//implement here
		return content;
	}
	

	public String showBookList(boolean option) {
		String list = """";
		//implement here
		return list;
	}
}",cs206b/ebookReader.java,...
1442640736939,NULL,211700,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader(BookStore bs) {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
		String list = """";
		//implement here
		return list;
	}
}",cs206b/ebookReader.java,...
1442641148444,NULL,211714,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader(BookStore bs) {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.
	    }
		String list = """";
		//implement here
		return list;
	}
}",cs206b/ebookReader.java,...
1442641179344,NULL,211715,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader(BookStore bs) {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show()
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show()
	    }
	}
}",cs206b/ebookReader.java,...
1442641184277,NULL,211716,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader(BookStore bs) {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1442641541015,NULL,211731,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1442644281897,NULL,211813,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1442644695117,NULL,211816,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1442645096561,NULL,211825,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1442645097355,NULL,211826,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1442645106752,NULL,211827,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1442645117176,NULL,211828,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1442645140759,NULL,211829,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1442997358153,NULL,219752,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
}",cs206b/ebookReader.java,...
1442997373399,NULL,219754,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/ebookReader.java,...
1443031121882,NULL,221788,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	SinglyLinkedList bookList;
	
	public ebookReader() {
		bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store ) {
		bookList.add(store.purchase(store.getId(name)));
	}
	
	public void buy(int id, BookStore store) {
		bookList.add(store.purchase(id));
	}
	
	public String read(String name) {
		return bookList.search(name).getContent();
	}
	
	public String read(int id) {
		return bookList.search(id).getContent();
	}
	

	public String showBookList(boolean option) {
		String list = """";
		if(option == true){
		Book i;
		int j,k;
		int memory[] = new int[20];
		bookList.resetIterator();
		for(j=0;;j++){
		    i=bookList.call();
		    if(i!=null)memory[j] = i.getId();
		    else break;
		}
		for(int a=0;a<j;a++)
		{
		    for(int b=a+1;b<j;b++){
		        if(memory[a]>memory[b]){
		            k=memory[a];
		            memory[a] = memory[b];
		            memory[b] = k;
		        }
		    }
		}
		for(int a=0;a<j;a++){
		    list = list + memory[a] + "" "" + bookList.search(memory[a]).getName();
		    list = list+""\n"";
		}
		}
		else{
		    Book i;
		int j;
		String k;
		String memory[] = new String[20];
		bookList.resetIterator();
		for(j=0;;j++){
		    i=bookList.call();
		    if(i!=null)memory[j] = i.getName();
		    else break;
		}
		for(int a=0;a<j;a++)
		{
		    for(int b=a+1;b<j;b++){
		        if(memory[a].compareTo(memory[b])>0){
		            k=memory[a];
		            memory[a] = memory[b];
		            memory[b] = k;
		        }
		    }
		}
		for(int a=0;a<j;a++){
		    list = list + bookList.search(memory[a]).getId() + "" "" + memory[a];
		    list = list+""\n"";
		}
		}
		return list;
	}
}",cs206b/ebookReader.java,...
1442639242638,NULL,211612,1,43,"package cs206b;

public class SinglyLinkedList {

	private static class Node {

	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() { }

    public void append()

}",cs206b/SinglyLinkedList.java,...
1442639256343,NULL,211613,1,43,"package cs206b;

public class SinglyLinkedList {

	private static class Node {
        public 
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() { }

    public void append()

}",cs206b/SinglyLinkedList.java,...
1442639309097,NULL,211615,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        public 
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() { }

    public void append()

}",cs206b/SinglyLinkedList.java,...
1442639344720,NULL,211616,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        public Book ele;
        public Node next;
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() { }

    public void append(Book item) {
        
    }

}",cs206b/SinglyLinkedList.java,...
1442639346384,NULL,211617,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        public Book ele;
        public Node next;
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() { }

    public void append(Book item) {
        
    }

}",cs206b/SinglyLinkedList.java,...
1442639475785,NULL,211621,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() { }

    public void append(Book item) {
        
    }

}",cs206b/SinglyLinkedList.java,...
1442639552877,NULL,211625,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = tail;
	}

    public void append(Book item) {
        
    }

}",cs206b/SinglyLinkedList.java,...
1442639831487,NULL,211644,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}

    public void append(Book item) {
        this.tail.next = new Node(item, null);
        this.tail = this.tail.next;
    }

}",cs206b/SinglyLinkedList.java,...
1442639836258,NULL,211646,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}

    public void append(Book item) {
        this.tail.next = new Node(item, null);
        this.tail = this.tail.next; 
    }

}",cs206b/SinglyLinkedList.java,...
1442639839104,NULL,211647,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}

    public void append(Book item) {
        this.tail.next = new Node(item, null);
        this.tail = this.tail.next;
    }

}",cs206b/SinglyLinkedList.java,...
1442639888484,NULL,211649,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}

    public void append(Book item) {
        this.tail.next = new Node(item, null);
        this.tail = this.tail.next;
    }

    public Book find(int Id) {
        
    }
    
    public Book find(String )
}",cs206b/SinglyLinkedList.java,...
1442639946471,NULL,211653,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}

    public void append(Book item) {
        this.tail.next = new Node(item, null);
        this.tail = this.tail.next;
    }

    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.)
        }
        
        return null;
    }
    
    public Book find(int id) {
        
    }
}",cs206b/SinglyLinkedList.java,...
1442639968545,NULL,211655,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}

    public void append(Book item) {
        this.tail.next = new Node(item, null);
        this.tail = this.tail.next;
    }

    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640293176,NULL,211677,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next)
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        this.tail.next = new Node(item, null);
        this.tail = this.tail.next;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640344960,NULL,211681,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next)
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next)
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640418103,NULL,211688,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next)
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next)
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640464912,NULL,211690,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter != null; iter = iter.next) {
            
        }
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next)
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next)
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640489746,NULL,211692,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            
        }
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next)
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next)
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640672674,NULL,211698,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() < leftNode.next.item.getId()) {
                    nlst.insert(post, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next)
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next)
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640706703,NULL,211699,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() < leftNode.next.item.getId()) {
                    nlst.insert(post, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName() < leftNode.next.item.getName()) {
                    nlst.insert(post, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next)
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next)
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640753008,NULL,211701,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() < leftNode.next.item.getId()) {
                    nlst.insert(post, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName() < leftNode.next.item.getName()) {
                    nlst.insert(post, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640771879,NULL,211702,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() < leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName() < leftNode.next.item.getName()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName() == name) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640903781,NULL,211704,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() < leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) < 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640927460,NULL,211707,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442640949795,NULL,211709,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
}",cs206b/SinglyLinkedList.java,...
1442641035798,NULL,211711,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public void show() {
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            System.out.println(item.getId().toString() + "" "" + item.getName());
            
            iter = iter.next;
        }
    }
}",cs206b/SinglyLinkedList.java,...
1442641075610,NULL,211712,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId().toString() + "" "" + item.getName());
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641127086,NULL,211713,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName());
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641235755,NULL,211717,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                System.out.println(leftNode.next);
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName());
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641250643,NULL,211718,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                System.out.println(leftNode.next.item);
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName());
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641303098,NULL,211720,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
	    System.out.println(item);
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName());
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641314462,NULL,211721,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead(); iter.next != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
	    System.out.println(item);
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName());
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641417119,NULL,211723,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName());
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641431055,NULL,211724,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\m"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641436869,NULL,211726,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641948074,NULL,211749,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return this.head.next.item;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return this.head.next.item;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442641984258,NULL,211751,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return iter.item;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442642012881,NULL,211753,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.next.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead();
            for (int pos = 0; leftNode.next != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.next.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode.next == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442642079826,NULL,211754,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode, pos++) {
                if (iter.item.getName().compareTo(leftNode.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442644736087,NULL,211817,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/SinglyLinkedList.java,...
1442644748951,NULL,211818,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;
import cs206b.SinglyLinkedList; 

public class ebookReader {
	
	SinglyLinkedList bookList;
	
	public ebookReader() {
	    this.bookList = new SinglyLinkedList();
	}
	
	public void buy(String name, BookStore store) {
		int id = store.getId(name);
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public void buy(int id, BookStore store) {
		Book item = store.purchase(id);
		this.bookList.insertLast(item);
	}
	
	public String read(String name) {
        Book item = bookList.find(name);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	
	public String read(int id) {
        Book item = bookList.find(id);
        if (item == null) {
            return """";
        }
		return item.getContent();
	}
	

	public String showBookList(boolean option) {
	    if (option) {
	        SinglyLinkedList lst = SinglyLinkedList.orderById(this.bookList);
	        return lst.show();
	    } else {
	        SinglyLinkedList lst = SinglyLinkedList.orderByName(this.bookList);
	        return lst.show();
	    }
	}
}",cs206b/SinglyLinkedList.java,...
1442644895699,NULL,211819,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode, pos++) {
                if (iter.item.getName().compareTo(leftNode.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442644964160,NULL,211820,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode.next, pos++) {
                System.out.println(pos);
                if (iter.item.getId() <= leftNode.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode, pos++) {
                System.out.println(pos);
                if (iter.item.getName().compareTo(leftNode.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442645006177,NULL,211821,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            System.out.println(iter);
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode, pos++) {
                if (iter.item.getName().compareTo(leftNode.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442645027319,NULL,211822,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            System.out.println(iter);
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode, pos++) {
                if (iter.item.getName().compareTo(leftNode.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1442645049729,NULL,211824,1,43,"package cs206b;

import cs206b.Book;

public class SinglyLinkedList {

	private static class Node {
        private Book item;
        private Node next;
        
        public Node(Book item, Node next) {
            this.item = item;
            this.next = next;
        }
        
        public Book getItem() {
            return this.item;
        }
        
        public Node getNext() {
            return this.next;
        }
        
        public void setNext(Node next) {
            this.next = next;
        }
	}
	
	private Node head = null;
	private Node tail = null;
	
	public SinglyLinkedList() {
	    Node sentinel = new Node(null, null);
	    this.head = sentinel;
	    this.tail = sentinel;
	}
    
    static public SinglyLinkedList orderById(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getId() <= leftNode.item.getId()) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    static public SinglyLinkedList orderByName(SinglyLinkedList lst) {
        SinglyLinkedList nlst = new SinglyLinkedList();
        
        for (Node iter = lst.getHead().next; iter != null; iter = iter.next) {
            Node leftNode = nlst.getHead().next;
            for (int pos = 0; leftNode != null; leftNode = leftNode.next, pos++) {
                if (iter.item.getName().compareTo(leftNode.item.getName()) <= 0) {
                    nlst.insert(pos, iter.item);
                    break;
                }
            }
            
            if (leftNode == null) {
                nlst.insertLast(iter.item);
            }
        }
        
        return nlst;
    }
    
    public Node getHead() {
        return this.head;
    }
    
    public Node getTail() {
        return this.tail;
    }
    
	public void insert(int pos, Book item) {
        Node iter = this.head;
        
        for (int i=0; i<pos; ++i) {
            iter = iter.next;
        }
        
        Node nNode = new Node(item, iter.next);
        iter.next = nNode;
        if (nNode.next == null) {
            this.tail = nNode;
        }
    }
    
    public void insertLast(Book item) {
        Node nNode = new Node(item, this.tail.next);
        this.tail.next = nNode;
        this.tail = nNode;
    }
    
    public Book find(String name) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getName().equals(name)) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public Book find(int id) {
        Node iter = this.head.next;
        
        while (iter != null) {
            if (iter.item.getId() == id) {
                return iter.item;
            }
            iter = iter.next;
        }
        
        return null;
    }
    
    public String show() {
        StringBuilder sb = new StringBuilder();
        Node iter = this.head.next;
        
        while (iter != null) {
            Book item = iter.item;
            sb.append(item.getId() + "" "" + item.getName() + ""\n"");
            
            iter = iter.next;
        }
        
        return sb.toString();
    }
}",cs206b/SinglyLinkedList.java,...
1443031111822,NULL,221787,1,43,"package cs206b;

import java.io.*;
import java.util.*;
import java.nio.file.*;

import cs206b.Book;
import cs206b.BookStore;


public class SinglyLinkedList {

	private static class Node {
        private Book book;
        private Node next;
        public Node(Book b, Node n){
            book = b;
            next = n;
        }
        public Book getContent(){ return book;}
        public Node getNext(){ return next; }
        public void setNext(Node n){ next = n; }
	}
	
	private Node head = null;
	private Node tail = null;
	private Node iterator;
	
	public SinglyLinkedList() {
	    iterator = head;
	}

	// You can add your any methods or members you want.  
	public void add(Book book){
	    if(head == null){
	        Node newNode = new Node(book,null);
	        head = newNode;
	        tail = newNode;
	        iterator = head;
	    }
	    else{
	        Node newNode = new Node(book,null);
	        tail.setNext(newNode);
	        tail = newNode;
	    }
	}
	public Book search(int id)
	{
	    Node i;
	    i=head;
	    if(i==null) return null;
	    while(i != null){
	        if(i.getContent().getId() == id) return i.getContent();
	        else i=i.getNext();
	    }
	    return null;
	}
	public Book search(String name)
	{
	    Node i;
	    i=head;
	    if(i==null) return null;
	    while(i != null){
	        if(i.getContent().getName().equals(name)) return i.getContent();
	        else i=i.getNext();
	    }
	    return null;
	}
	public Book call(){
	    Node i = iterator;
	    if(i==null) return null;
	    iterator = iterator.getNext();
	    return i.getContent();
	}
	public void resetIterator(){
	    iterator = head;
	}
}",cs206b/SinglyLinkedList.java,...
